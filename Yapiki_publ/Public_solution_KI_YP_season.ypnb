{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "78b262fa"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import typing\n",
    "import torch\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from lightautoml.automl.presets.tabular_presets import TabularUtilizedAutoML\n",
    "from lightautoml.tasks import Task\n",
    "\n",
    "import phik\n",
    "from phik.report import plot_correlation_matrix\n",
    "from phik import report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "5114ddf7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((279792, 77), (2974, 76))"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data = pd.read_csv('../input/train.csv')\n",
    "test_data = pd.read_csv('../input/test.csv')\n",
    "train_data.shape, test_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA analisys"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Анализ отчет pandas_profiling (! big size file) https://drive.google.com/file/d/1xQl3LvpX9J0G6gJoaBjzRcBFKZi6QZXz/view?usp=sharing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in train_data.select_dtypes(include=np.number).columns:\n",
    "    train_data[col] = pd.to_numeric(train_data[col], downcast = 'unsigned')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "      <th>osm_amenity_points_in_0.001</th>\n",
       "      <th>osm_amenity_points_in_0.005</th>\n",
       "      <th>osm_amenity_points_in_0.0075</th>\n",
       "      <th>osm_amenity_points_in_0.01</th>\n",
       "      <th>osm_building_points_in_0.001</th>\n",
       "      <th>osm_building_points_in_0.005</th>\n",
       "      <th>osm_building_points_in_0.0075</th>\n",
       "      <th>osm_building_points_in_0.01</th>\n",
       "      <th>...</th>\n",
       "      <th>reform_count_of_houses_500</th>\n",
       "      <th>reform_house_population_1000</th>\n",
       "      <th>reform_house_population_500</th>\n",
       "      <th>reform_mean_floor_count_1000</th>\n",
       "      <th>reform_mean_floor_count_500</th>\n",
       "      <th>reform_mean_year_building_1000</th>\n",
       "      <th>reform_mean_year_building_500</th>\n",
       "      <th>total_square</th>\n",
       "      <th>realty_type</th>\n",
       "      <th>price_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>279792.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>265196.000000</td>\n",
       "      <td>252558.000000</td>\n",
       "      <td>263084.000000</td>\n",
       "      <td>249624.000000</td>\n",
       "      <td>263553.000000</td>\n",
       "      <td>250155.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "      <td>279792.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>54.364078</td>\n",
       "      <td>47.763540</td>\n",
       "      <td>2.709084</td>\n",
       "      <td>40.605146</td>\n",
       "      <td>81.596171</td>\n",
       "      <td>133.285458</td>\n",
       "      <td>0.037442</td>\n",
       "      <td>0.885701</td>\n",
       "      <td>2.046467</td>\n",
       "      <td>3.748163</td>\n",
       "      <td>...</td>\n",
       "      <td>30.110661</td>\n",
       "      <td>2042.541716</td>\n",
       "      <td>644.610557</td>\n",
       "      <td>7.051233</td>\n",
       "      <td>7.360464</td>\n",
       "      <td>1967.532599</td>\n",
       "      <td>1967.988580</td>\n",
       "      <td>507.833604</td>\n",
       "      <td>54.974088</td>\n",
       "      <td>0.016058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.245713</td>\n",
       "      <td>17.044625</td>\n",
       "      <td>4.202451</td>\n",
       "      <td>53.293388</td>\n",
       "      <td>105.193169</td>\n",
       "      <td>172.290136</td>\n",
       "      <td>0.391014</td>\n",
       "      <td>6.858338</td>\n",
       "      <td>14.801566</td>\n",
       "      <td>25.679859</td>\n",
       "      <td>...</td>\n",
       "      <td>27.686234</td>\n",
       "      <td>1359.884747</td>\n",
       "      <td>445.699329</td>\n",
       "      <td>3.542084</td>\n",
       "      <td>4.231369</td>\n",
       "      <td>45.807699</td>\n",
       "      <td>54.110015</td>\n",
       "      <td>1704.251771</td>\n",
       "      <td>47.856417</td>\n",
       "      <td>0.125700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>42.651897</td>\n",
       "      <td>19.892178</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>53.226600</td>\n",
       "      <td>37.582988</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>932.000000</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>4.591837</td>\n",
       "      <td>4.619959</td>\n",
       "      <td>1960.070000</td>\n",
       "      <td>1959.890097</td>\n",
       "      <td>65.900000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>55.679090</td>\n",
       "      <td>39.702435</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>46.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>1949.000000</td>\n",
       "      <td>602.000000</td>\n",
       "      <td>6.368932</td>\n",
       "      <td>6.395349</td>\n",
       "      <td>1970.890411</td>\n",
       "      <td>1971.647059</td>\n",
       "      <td>128.737034</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>56.306976</td>\n",
       "      <td>55.957523</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>164.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>2978.000000</td>\n",
       "      <td>936.000000</td>\n",
       "      <td>8.698925</td>\n",
       "      <td>9.100000</td>\n",
       "      <td>1983.701754</td>\n",
       "      <td>1986.950000</td>\n",
       "      <td>336.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>69.500740</td>\n",
       "      <td>151.777000</td>\n",
       "      <td>46.000000</td>\n",
       "      <td>468.000000</td>\n",
       "      <td>851.000000</td>\n",
       "      <td>1392.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>586.000000</td>\n",
       "      <td>949.000000</td>\n",
       "      <td>1162.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>289.000000</td>\n",
       "      <td>18392.000000</td>\n",
       "      <td>6105.000000</td>\n",
       "      <td>53.717949</td>\n",
       "      <td>221.666667</td>\n",
       "      <td>2019.000000</td>\n",
       "      <td>2020.000000</td>\n",
       "      <td>40000.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 70 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 lat            lng  osm_amenity_points_in_0.001  \\\n",
       "count  279792.000000  279792.000000                279792.000000   \n",
       "mean       54.364078      47.763540                     2.709084   \n",
       "std         4.245713      17.044625                     4.202451   \n",
       "min        42.651897      19.892178                     0.000000   \n",
       "25%        53.226600      37.582988                     0.000000   \n",
       "50%        55.679090      39.702435                     1.000000   \n",
       "75%        56.306976      55.957523                     4.000000   \n",
       "max        69.500740     151.777000                    46.000000   \n",
       "\n",
       "       osm_amenity_points_in_0.005  osm_amenity_points_in_0.0075  \\\n",
       "count                279792.000000                 279792.000000   \n",
       "mean                     40.605146                     81.596171   \n",
       "std                      53.293388                    105.193169   \n",
       "min                       0.000000                      0.000000   \n",
       "25%                       7.000000                     16.000000   \n",
       "50%                      22.000000                     46.000000   \n",
       "75%                      51.000000                    101.000000   \n",
       "max                     468.000000                    851.000000   \n",
       "\n",
       "       osm_amenity_points_in_0.01  osm_building_points_in_0.001  \\\n",
       "count               279792.000000                 279792.000000   \n",
       "mean                   133.285458                      0.037442   \n",
       "std                    172.290136                      0.391014   \n",
       "min                      0.000000                      0.000000   \n",
       "25%                     28.000000                      0.000000   \n",
       "50%                     77.000000                      0.000000   \n",
       "75%                    164.000000                      0.000000   \n",
       "max                   1392.000000                     30.000000   \n",
       "\n",
       "       osm_building_points_in_0.005  osm_building_points_in_0.0075  \\\n",
       "count                 279792.000000                  279792.000000   \n",
       "mean                       0.885701                       2.046467   \n",
       "std                        6.858338                      14.801566   \n",
       "min                        0.000000                       0.000000   \n",
       "25%                        0.000000                       0.000000   \n",
       "50%                        0.000000                       0.000000   \n",
       "75%                        0.000000                       1.000000   \n",
       "max                      586.000000                     949.000000   \n",
       "\n",
       "       osm_building_points_in_0.01  ...  reform_count_of_houses_500  \\\n",
       "count                279792.000000  ...               279792.000000   \n",
       "mean                      3.748163  ...                   30.110661   \n",
       "std                      25.679859  ...                   27.686234   \n",
       "min                       0.000000  ...                    0.000000   \n",
       "25%                       0.000000  ...                   10.000000   \n",
       "50%                       0.000000  ...                   25.000000   \n",
       "75%                       2.000000  ...                   43.000000   \n",
       "max                    1162.000000  ...                  289.000000   \n",
       "\n",
       "       reform_house_population_1000  reform_house_population_500  \\\n",
       "count                 265196.000000                252558.000000   \n",
       "mean                    2042.541716                   644.610557   \n",
       "std                     1359.884747                   445.699329   \n",
       "min                        0.000000                     0.000000   \n",
       "25%                      932.000000                   290.000000   \n",
       "50%                     1949.000000                   602.000000   \n",
       "75%                     2978.000000                   936.000000   \n",
       "max                    18392.000000                  6105.000000   \n",
       "\n",
       "       reform_mean_floor_count_1000  reform_mean_floor_count_500  \\\n",
       "count                 263084.000000                249624.000000   \n",
       "mean                       7.051233                     7.360464   \n",
       "std                        3.542084                     4.231369   \n",
       "min                        0.000000                     0.000000   \n",
       "25%                        4.591837                     4.619959   \n",
       "50%                        6.368932                     6.395349   \n",
       "75%                        8.698925                     9.100000   \n",
       "max                       53.717949                   221.666667   \n",
       "\n",
       "       reform_mean_year_building_1000  reform_mean_year_building_500  \\\n",
       "count                   263553.000000                  250155.000000   \n",
       "mean                      1967.532599                    1967.988580   \n",
       "std                         45.807699                      54.110015   \n",
       "min                          1.000000                       1.000000   \n",
       "25%                       1960.070000                    1959.890097   \n",
       "50%                       1970.890411                    1971.647059   \n",
       "75%                       1983.701754                    1986.950000   \n",
       "max                       2019.000000                    2020.000000   \n",
       "\n",
       "        total_square    realty_type     price_type  \n",
       "count  279792.000000  279792.000000  279792.000000  \n",
       "mean      507.833604      54.974088       0.016058  \n",
       "std      1704.251771      47.856417       0.125700  \n",
       "min         5.100000      10.000000       0.000000  \n",
       "25%        65.900000      10.000000       0.000000  \n",
       "50%       128.737034      10.000000       0.000000  \n",
       "75%       336.000000     110.000000       0.000000  \n",
       "max     40000.000000     110.000000       1.000000  \n",
       "\n",
       "[8 rows x 70 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_features(df):\n",
    "    return pd.DataFrame({'unique_values': df.nunique(),'type': df.dtypes,'pct_missing': df.isna().sum()/len(df) * 100}).sort_values(by = 'pct_missing', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>floor</th>\n",
       "      <th>reform_mean_floor_count_500</th>\n",
       "      <th>reform_mean_year_building_500</th>\n",
       "      <th>reform_house_population_500</th>\n",
       "      <th>reform_mean_floor_count_1000</th>\n",
       "      <th>reform_mean_year_building_1000</th>\n",
       "      <th>reform_house_population_1000</th>\n",
       "      <th>street</th>\n",
       "      <th>osm_city_nearest_population</th>\n",
       "      <th>region</th>\n",
       "      <th>...</th>\n",
       "      <th>osm_finance_points_in_0.005</th>\n",
       "      <th>osm_finance_points_in_0.001</th>\n",
       "      <th>osm_culture_points_in_0.01</th>\n",
       "      <th>osm_culture_points_in_0.0075</th>\n",
       "      <th>osm_culture_points_in_0.005</th>\n",
       "      <th>osm_culture_points_in_0.001</th>\n",
       "      <th>osm_crossing_points_in_0.01</th>\n",
       "      <th>osm_crossing_points_in_0.0075</th>\n",
       "      <th>osm_crossing_points_in_0.005</th>\n",
       "      <th>price_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>unique_values</th>\n",
       "      <td>206</td>\n",
       "      <td>17121</td>\n",
       "      <td>43143</td>\n",
       "      <td>2366</td>\n",
       "      <td>49017</td>\n",
       "      <td>76044</td>\n",
       "      <td>6206</td>\n",
       "      <td>28841</td>\n",
       "      <td>169</td>\n",
       "      <td>49</td>\n",
       "      <td>...</td>\n",
       "      <td>29</td>\n",
       "      <td>7</td>\n",
       "      <td>216</td>\n",
       "      <td>159</td>\n",
       "      <td>111</td>\n",
       "      <td>16</td>\n",
       "      <td>268</td>\n",
       "      <td>191</td>\n",
       "      <td>108</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>type</th>\n",
       "      <td>object</td>\n",
       "      <td>float64</td>\n",
       "      <td>float64</td>\n",
       "      <td>float64</td>\n",
       "      <td>float64</td>\n",
       "      <td>float64</td>\n",
       "      <td>float64</td>\n",
       "      <td>object</td>\n",
       "      <td>float64</td>\n",
       "      <td>object</td>\n",
       "      <td>...</td>\n",
       "      <td>uint8</td>\n",
       "      <td>uint8</td>\n",
       "      <td>uint16</td>\n",
       "      <td>uint16</td>\n",
       "      <td>uint8</td>\n",
       "      <td>uint8</td>\n",
       "      <td>uint16</td>\n",
       "      <td>uint8</td>\n",
       "      <td>uint8</td>\n",
       "      <td>uint8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pct_missing</th>\n",
       "      <td>62.9886</td>\n",
       "      <td>10.7823</td>\n",
       "      <td>10.5925</td>\n",
       "      <td>9.73366</td>\n",
       "      <td>5.97158</td>\n",
       "      <td>5.80395</td>\n",
       "      <td>5.21673</td>\n",
       "      <td>0.573998</td>\n",
       "      <td>0.0196575</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 77 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 floor reform_mean_floor_count_500  \\\n",
       "unique_values      206                       17121   \n",
       "type            object                     float64   \n",
       "pct_missing    62.9886                     10.7823   \n",
       "\n",
       "              reform_mean_year_building_500 reform_house_population_500  \\\n",
       "unique_values                         43143                        2366   \n",
       "type                                float64                     float64   \n",
       "pct_missing                         10.5925                     9.73366   \n",
       "\n",
       "              reform_mean_floor_count_1000 reform_mean_year_building_1000  \\\n",
       "unique_values                        49017                          76044   \n",
       "type                               float64                        float64   \n",
       "pct_missing                        5.97158                        5.80395   \n",
       "\n",
       "              reform_house_population_1000    street  \\\n",
       "unique_values                         6206     28841   \n",
       "type                               float64    object   \n",
       "pct_missing                        5.21673  0.573998   \n",
       "\n",
       "              osm_city_nearest_population  region  ...  \\\n",
       "unique_values                         169      49  ...   \n",
       "type                              float64  object  ...   \n",
       "pct_missing                     0.0196575       0  ...   \n",
       "\n",
       "              osm_finance_points_in_0.005 osm_finance_points_in_0.001  \\\n",
       "unique_values                          29                           7   \n",
       "type                                uint8                       uint8   \n",
       "pct_missing                             0                           0   \n",
       "\n",
       "              osm_culture_points_in_0.01 osm_culture_points_in_0.0075  \\\n",
       "unique_values                        216                          159   \n",
       "type                              uint16                       uint16   \n",
       "pct_missing                            0                            0   \n",
       "\n",
       "              osm_culture_points_in_0.005 osm_culture_points_in_0.001  \\\n",
       "unique_values                         111                          16   \n",
       "type                                uint8                       uint8   \n",
       "pct_missing                             0                           0   \n",
       "\n",
       "              osm_crossing_points_in_0.01 osm_crossing_points_in_0.0075  \\\n",
       "unique_values                         268                           191   \n",
       "type                               uint16                         uint8   \n",
       "pct_missing                             0                             0   \n",
       "\n",
       "              osm_crossing_points_in_0.005 price_type  \n",
       "unique_values                          108          2  \n",
       "type                                 uint8      uint8  \n",
       "pct_missing                              0          0  \n",
       "\n",
       "[3 rows x 77 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check_features(train_data).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([nan, 3.0, 4.0, -1.0, 1.0, 14.0, 2.0, 8.0, -2.0, 6.0, 10.0, 5.0,\n",
       "       16.0, 19.0, 7.0, 9.0, 58.0, 24.0, 18.0, 26.0, 17.0, 48.0, 11.0,\n",
       "       -3.0, 15.0, 22.0, 60.0, 12.0, 21.0, 35.0, 28.0, 38.0, 39.0, 13.0,\n",
       "       81.0, 44.0, 82.0, 25.0, 45.0, 47.0, 23.0, 37.0, 29.0, 113.0, 78.0,\n",
       "       42.0, 69.0, 27.0, 46.0, 53.0, 80.0, 70.0, 76.0, 64.0, 30.0, 73.0,\n",
       "       77.0, 52.0, 67.0, 65.0, 20.0, 40.0, 49.0, 75.0, 93.0, 94.0, 91.0,\n",
       "       72.0, 79.0, 84.0, 92.0, 33.0, 66.0, 90.0, 31.0, 36.0, 61.0, 71.0,\n",
       "       68.0, 51.0, 97.0, 43.0, 95.0, 85.0, 50.0, 0.0, 62.0, 54.0, 74.0,\n",
       "       57.0, 41.0, 34.0, 59.0, 56.0, 123.0, 55.0, 83.0, '27.0', '1.0',\n",
       "       '5.0', '-1.0', '67.0', '2.0', '0.0', '4.0', '6.0', '3.0', '15.0',\n",
       "       '10.0', '11.0', '30.0', '12.0', '-2.0', '14.0', '36.0', '8.0',\n",
       "       '50.0', '17.0', '19.0', '37.0', '68.0', '7.0', '42.0', '9.0',\n",
       "       '16.0', '20.0', '53.0', '91.0', '84.0', '38.0', '21.0', '48.0',\n",
       "       '22.0', '23.0', '1', '18.0', 'подвал, 1', '2', 'подвал',\n",
       "       'цоколь, 1', '1,2,антресоль', 'цоколь', '4', '5', 'тех.этаж (6)',\n",
       "       '3', 'Подвал', 'Цоколь', '10', 'фактически на уровне 1 этажа', '6',\n",
       "       '1,2,3', '1, подвал', '1,2,3,4', '1,2', '1,2,3,4,5', '5, мансарда',\n",
       "       '1-й, подвал', '12', '15', '13', '1, подвал, антресоль', 'мезонин',\n",
       "       'подвал, 1-3', '8', '7', '1 (Цокольный этаж)',\n",
       "       '3, Мансарда (4 эт)', 'подвал,1', '1, антресоль', '1-3',\n",
       "       'мансарда (4эт)', '1, 2.', '9', 'подвал , 1 ', '1, 2',\n",
       "       'подвал, 1,2,3', '1 + подвал (без отделки)', 'мансарда', '2,3',\n",
       "       '4, 5', '1-й, 2-й', '18', '1 этаж, подвал', '1, цоколь',\n",
       "       'подвал, 1-7, техэтаж', '3 (антресоль)', '1, 2, 3',\n",
       "       'Цоколь, 1,2(мансарда)', 'подвал, 3. 4 этаж', 'подвал, 1-4 этаж',\n",
       "       'подва, 1.2 этаж', '2, 3', '-1', '1.2', '11', '36', '7,8',\n",
       "       '1 этаж', '1-й', '3 этаж', '4 этаж', '5 этаж', 'подвал,1,2,3,4,5',\n",
       "       '29', 'подвал, цоколь, 1 этаж', '3, мансарда'], dtype=object)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['floor'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Вручную обработали столбец с этажами\n",
    "for df in [train_data, test_data]:\n",
    "    df.replace('1', 1, inplace=True)\n",
    "    df.replace('1.0', 1, inplace=True)\n",
    "\n",
    "train_data['floor'] = train_data.apply(lambda row: 1 if row['floor'] == 1 else 0, axis=1)\n",
    "test_data['floor'] = test_data.apply(lambda row: 1 if row['floor'] == 1 else 0, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# вручную удалила повторяющиеся признаки с разным метражом, оставив только значение \"in 0.01\" для osm и \"1000\" для reform, чтобы матрица корреляции помещалась на экране\n",
    "columns_for_pearson = [\n",
    "                       'per_square_meter_price', \n",
    "                       'city', 'floor',\n",
    "                       'osm_amenity_points_in_0.01', \n",
    "                       'osm_building_points_in_0.01', \n",
    "                       'osm_catering_points_in_0.01', \n",
    "                       'osm_city_closest_dist', \n",
    "                       'osm_city_nearest_name', \n",
    "                       'osm_city_nearest_population',\n",
    "                       'osm_crossing_closest_dist', \n",
    "                       'osm_crossing_points_in_0.01', \n",
    "                       'osm_culture_points_in_0.01',\n",
    "                       'osm_healthcare_points_in_0.01', \n",
    "                       'osm_historic_points_in_0.01', \n",
    "                       'osm_hotels_points_in_0.01',\n",
    "                       'osm_leisure_points_in_0.01', \n",
    "                       'osm_offices_points_in_0.01', \n",
    "                       'osm_shops_points_in_0.01', \n",
    "                       'osm_subway_closest_dist',\n",
    "                       'osm_train_stop_closest_dist', \n",
    "                       'osm_train_stop_points_in_0.01', \n",
    "                       'osm_transport_stop_closest_dist',\n",
    "                       'osm_transport_stop_points_in_0.01', \n",
    "                       'reform_count_of_houses_1000', \n",
    "                       'reform_house_population_1000',\n",
    "                       'reform_mean_floor_count_1000', \n",
    "                       'reform_mean_year_building_1000', \n",
    "                       'region', \n",
    "                       'total_square', \n",
    "                       'street', \n",
    "                       'date', \n",
    "                       'realty_type', \n",
    "                       'price_type']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>pearson</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>per_square_meter_price</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>osm_city_nearest_population</td>\n",
       "      <td>0.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>osm_amenity_points_in_0.01</td>\n",
       "      <td>0.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>osm_healthcare_points_in_0.01</td>\n",
       "      <td>0.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>osm_catering_points_in_0.01</td>\n",
       "      <td>0.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>osm_leisure_points_in_0.01</td>\n",
       "      <td>0.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>osm_shops_points_in_0.01</td>\n",
       "      <td>0.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>osm_transport_stop_points_in_0.01</td>\n",
       "      <td>0.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>osm_crossing_points_in_0.01</td>\n",
       "      <td>0.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>osm_offices_points_in_0.01</td>\n",
       "      <td>0.42</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              feature  pearson\n",
       "0              per_square_meter_price     1.00\n",
       "6         osm_city_nearest_population     0.55\n",
       "2          osm_amenity_points_in_0.01     0.48\n",
       "10      osm_healthcare_points_in_0.01     0.46\n",
       "4         osm_catering_points_in_0.01     0.46\n",
       "13         osm_leisure_points_in_0.01     0.46\n",
       "15           osm_shops_points_in_0.01     0.44\n",
       "20  osm_transport_stop_points_in_0.01     0.43\n",
       "8         osm_crossing_points_in_0.01     0.43\n",
       "14         osm_offices_points_in_0.01     0.42"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Находим признаки, имеющие максимальное значение коэффициента корреляции Пирсона с целевой переменной. \n",
    "# В качестве отсечки выбрано значение 0.4 по модулю\n",
    "pearson = train_data[columns_for_pearson].corr().round(2)\n",
    "pearson_max_corr = (\n",
    "    pearson['per_square_meter_price'].to_frame().reset_index()\n",
    "    .rename(columns={'per_square_meter_price':'pearson', 'index':'feature'})\n",
    "    .sort_values(by='pearson', ascending=False)\n",
    "    .query('pearson > 0.4 or pearson < -0.4')\n",
    "    )\n",
    "pearson_max_corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fig, ax = plt.subplots(figsize=(20, 20))\n",
    "# sns.heatmap(train_data[columns_for_pearson].corr().round(2), annot=True, square=True, cmap='mako')\n",
    "# ax.set_title(label = 'МАТРИЦА КОРРЕЛЯЦИИ ПРИЗНАКОВ $r$', fontdict={'fontsize': 15, 'fontweight': 'bold'})\n",
    "# plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Высокая взаимная корреляция (> 0.8) у следующих переменных:\n",
    "- amenity и catering, healthcare, office, shop\n",
    "- catering и shop\n",
    "- office и shop, catering\n",
    "- healthcare и catering, office, shop,\n",
    "- transport и crossing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# убрали city и street(закодирована)\n",
    "\n",
    "columns_for_phik = [\n",
    "  'per_square_meter_price',\n",
    " 'floor',\n",
    " 'osm_amenity_points_in_0.01',\n",
    " 'osm_building_points_in_0.01',\n",
    " 'osm_catering_points_in_0.01',\n",
    " 'osm_city_closest_dist',\n",
    " 'osm_city_nearest_name',\n",
    " 'osm_city_nearest_population',\n",
    " 'osm_crossing_closest_dist',\n",
    " 'osm_crossing_points_in_0.01',\n",
    " 'osm_culture_points_in_0.01',\n",
    " 'osm_healthcare_points_in_0.01',\n",
    " 'osm_historic_points_in_0.01',\n",
    " 'osm_hotels_points_in_0.01',\n",
    " 'osm_leisure_points_in_0.01',\n",
    " 'osm_offices_points_in_0.01',\n",
    " 'osm_shops_points_in_0.01',\n",
    " 'osm_subway_closest_dist',\n",
    " 'osm_train_stop_closest_dist',\n",
    " 'osm_train_stop_points_in_0.01',\n",
    " 'osm_transport_stop_closest_dist',\n",
    " 'osm_transport_stop_points_in_0.01',\n",
    " 'reform_count_of_houses_1000',\n",
    " 'reform_house_population_1000',\n",
    " 'reform_mean_floor_count_1000',\n",
    " 'reform_mean_year_building_1000',\n",
    " 'region',\n",
    " 'total_square',\n",
    " 'date',\n",
    " 'realty_type',\n",
    " 'price_type']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>per_square_meter_price</th>\n",
       "      <th>floor</th>\n",
       "      <th>osm_amenity_points_in_0.01</th>\n",
       "      <th>osm_building_points_in_0.01</th>\n",
       "      <th>osm_catering_points_in_0.01</th>\n",
       "      <th>osm_city_closest_dist</th>\n",
       "      <th>osm_city_nearest_name</th>\n",
       "      <th>osm_city_nearest_population</th>\n",
       "      <th>osm_crossing_closest_dist</th>\n",
       "      <th>osm_crossing_points_in_0.01</th>\n",
       "      <th>...</th>\n",
       "      <th>osm_transport_stop_points_in_0.01</th>\n",
       "      <th>reform_count_of_houses_1000</th>\n",
       "      <th>reform_house_population_1000</th>\n",
       "      <th>reform_mean_floor_count_1000</th>\n",
       "      <th>reform_mean_year_building_1000</th>\n",
       "      <th>region</th>\n",
       "      <th>total_square</th>\n",
       "      <th>date</th>\n",
       "      <th>realty_type</th>\n",
       "      <th>price_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>per_square_meter_price</th>\n",
       "      <td>1.00</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.57</td>\n",
       "      <td>...</td>\n",
       "      <td>0.46</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>floor</th>\n",
       "      <td>0.18</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.14</td>\n",
       "      <td>...</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_amenity_points_in_0.01</th>\n",
       "      <td>0.48</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.96</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.82</td>\n",
       "      <td>...</td>\n",
       "      <td>0.69</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.62</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_building_points_in_0.01</th>\n",
       "      <td>0.02</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.11</td>\n",
       "      <td>...</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_catering_points_in_0.01</th>\n",
       "      <td>0.48</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.96</td>\n",
       "      <td>0.02</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.51</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.80</td>\n",
       "      <td>...</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_city_closest_dist</th>\n",
       "      <td>0.05</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.05</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.73</td>\n",
       "      <td>0.22</td>\n",
       "      <td>...</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_city_nearest_name</th>\n",
       "      <td>0.57</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.51</td>\n",
       "      <td>0.80</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.64</td>\n",
       "      <td>...</td>\n",
       "      <td>0.62</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.59</td>\n",
       "      <td>0.44</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_city_nearest_population</th>\n",
       "      <td>0.55</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.11</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.60</td>\n",
       "      <td>...</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.97</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_crossing_closest_dist</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.73</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_crossing_points_in_0.01</th>\n",
       "      <td>0.57</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.82</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.67</td>\n",
       "      <td>0.59</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_culture_points_in_0.01</th>\n",
       "      <td>0.31</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.61</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.46</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.62</td>\n",
       "      <td>...</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_healthcare_points_in_0.01</th>\n",
       "      <td>0.46</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.81</td>\n",
       "      <td>...</td>\n",
       "      <td>0.68</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.46</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_historic_points_in_0.01</th>\n",
       "      <td>0.38</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.73</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.76</td>\n",
       "      <td>...</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_hotels_points_in_0.01</th>\n",
       "      <td>0.37</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.44</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.71</td>\n",
       "      <td>...</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.36</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_leisure_points_in_0.01</th>\n",
       "      <td>0.47</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.68</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.71</td>\n",
       "      <td>...</td>\n",
       "      <td>0.58</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_offices_points_in_0.01</th>\n",
       "      <td>0.47</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.87</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.76</td>\n",
       "      <td>...</td>\n",
       "      <td>0.61</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.59</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_shops_points_in_0.01</th>\n",
       "      <td>0.47</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.96</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.92</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.79</td>\n",
       "      <td>...</td>\n",
       "      <td>0.67</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.65</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_subway_closest_dist</th>\n",
       "      <td>0.18</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.41</td>\n",
       "      <td>0.99</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.20</td>\n",
       "      <td>...</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.91</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_train_stop_closest_dist</th>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.73</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.79</td>\n",
       "      <td>0.09</td>\n",
       "      <td>...</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_train_stop_points_in_0.01</th>\n",
       "      <td>0.27</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.46</td>\n",
       "      <td>...</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_transport_stop_closest_dist</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.73</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>osm_transport_stop_points_in_0.01</th>\n",
       "      <td>0.46</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.69</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.62</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.77</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reform_count_of_houses_1000</th>\n",
       "      <td>0.16</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.67</td>\n",
       "      <td>...</td>\n",
       "      <td>0.52</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reform_house_population_1000</th>\n",
       "      <td>0.19</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.62</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.59</td>\n",
       "      <td>...</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.55</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.36</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reform_mean_floor_count_1000</th>\n",
       "      <td>0.23</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.59</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.41</td>\n",
       "      <td>...</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.31</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reform_mean_year_building_1000</th>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.44</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.17</td>\n",
       "      <td>...</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.08</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region</th>\n",
       "      <td>0.52</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.40</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.97</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.55</td>\n",
       "      <td>...</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.36</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.37</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_square</th>\n",
       "      <td>0.02</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.18</td>\n",
       "      <td>...</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.08</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <td>0.11</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.17</td>\n",
       "      <td>...</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.02</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>realty_type</th>\n",
       "      <td>0.18</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.31</td>\n",
       "      <td>...</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.10</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price_type</th>\n",
       "      <td>0.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.09</td>\n",
       "      <td>...</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>31 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   per_square_meter_price  floor  \\\n",
       "per_square_meter_price                               1.00   0.18   \n",
       "floor                                                0.18   1.00   \n",
       "osm_amenity_points_in_0.01                           0.48   0.07   \n",
       "osm_building_points_in_0.01                          0.02   0.01   \n",
       "osm_catering_points_in_0.01                          0.48   0.06   \n",
       "osm_city_closest_dist                                0.05   0.08   \n",
       "osm_city_nearest_name                                0.57   0.28   \n",
       "osm_city_nearest_population                          0.55   0.15   \n",
       "osm_crossing_closest_dist                            0.00   0.01   \n",
       "osm_crossing_points_in_0.01                          0.57   0.14   \n",
       "osm_culture_points_in_0.01                           0.31   0.04   \n",
       "osm_healthcare_points_in_0.01                        0.46   0.10   \n",
       "osm_historic_points_in_0.01                          0.38   0.05   \n",
       "osm_hotels_points_in_0.01                            0.37   0.06   \n",
       "osm_leisure_points_in_0.01                           0.47   0.10   \n",
       "osm_offices_points_in_0.01                           0.47   0.08   \n",
       "osm_shops_points_in_0.01                             0.47   0.07   \n",
       "osm_subway_closest_dist                              0.18   0.09   \n",
       "osm_train_stop_closest_dist                          0.02   0.02   \n",
       "osm_train_stop_points_in_0.01                        0.27   0.02   \n",
       "osm_transport_stop_closest_dist                      0.00   0.01   \n",
       "osm_transport_stop_points_in_0.01                    0.46   0.12   \n",
       "reform_count_of_houses_1000                          0.16   0.03   \n",
       "reform_house_population_1000                         0.19   0.10   \n",
       "reform_mean_floor_count_1000                         0.23   0.15   \n",
       "reform_mean_year_building_1000                       0.03   0.00   \n",
       "region                                               0.52   0.23   \n",
       "total_square                                         0.02   0.01   \n",
       "date                                                 0.11   0.22   \n",
       "realty_type                                          0.18   0.04   \n",
       "price_type                                           0.05   0.00   \n",
       "\n",
       "                                   osm_amenity_points_in_0.01  \\\n",
       "per_square_meter_price                                   0.48   \n",
       "floor                                                    0.07   \n",
       "osm_amenity_points_in_0.01                               1.00   \n",
       "osm_building_points_in_0.01                              0.02   \n",
       "osm_catering_points_in_0.01                              0.96   \n",
       "osm_city_closest_dist                                    0.07   \n",
       "osm_city_nearest_name                                    0.56   \n",
       "osm_city_nearest_population                              0.49   \n",
       "osm_crossing_closest_dist                                0.00   \n",
       "osm_crossing_points_in_0.01                              0.82   \n",
       "osm_culture_points_in_0.01                               0.61   \n",
       "osm_healthcare_points_in_0.01                            0.85   \n",
       "osm_historic_points_in_0.01                              0.75   \n",
       "osm_hotels_points_in_0.01                                0.88   \n",
       "osm_leisure_points_in_0.01                               0.72   \n",
       "osm_offices_points_in_0.01                               0.89   \n",
       "osm_shops_points_in_0.01                                 0.96   \n",
       "osm_subway_closest_dist                                  0.14   \n",
       "osm_train_stop_closest_dist                              0.03   \n",
       "osm_train_stop_points_in_0.01                            0.33   \n",
       "osm_transport_stop_closest_dist                          0.00   \n",
       "osm_transport_stop_points_in_0.01                        0.69   \n",
       "reform_count_of_houses_1000                              0.63   \n",
       "reform_house_population_1000                             0.62   \n",
       "reform_mean_floor_count_1000                             0.25   \n",
       "reform_mean_year_building_1000                           0.04   \n",
       "region                                                   0.45   \n",
       "total_square                                             0.05   \n",
       "date                                                     0.07   \n",
       "realty_type                                              0.18   \n",
       "price_type                                               0.22   \n",
       "\n",
       "                                   osm_building_points_in_0.01  \\\n",
       "per_square_meter_price                                    0.02   \n",
       "floor                                                     0.01   \n",
       "osm_amenity_points_in_0.01                                0.02   \n",
       "osm_building_points_in_0.01                               1.00   \n",
       "osm_catering_points_in_0.01                               0.02   \n",
       "osm_city_closest_dist                                     0.00   \n",
       "osm_city_nearest_name                                     0.28   \n",
       "osm_city_nearest_population                               0.17   \n",
       "osm_crossing_closest_dist                                 0.00   \n",
       "osm_crossing_points_in_0.01                               0.11   \n",
       "osm_culture_points_in_0.01                                0.00   \n",
       "osm_healthcare_points_in_0.01                             0.02   \n",
       "osm_historic_points_in_0.01                               0.01   \n",
       "osm_hotels_points_in_0.01                                 0.00   \n",
       "osm_leisure_points_in_0.01                                0.03   \n",
       "osm_offices_points_in_0.01                                0.02   \n",
       "osm_shops_points_in_0.01                                  0.02   \n",
       "osm_subway_closest_dist                                   0.12   \n",
       "osm_train_stop_closest_dist                               0.00   \n",
       "osm_train_stop_points_in_0.01                             0.00   \n",
       "osm_transport_stop_closest_dist                           0.00   \n",
       "osm_transport_stop_points_in_0.01                         0.04   \n",
       "reform_count_of_houses_1000                               0.03   \n",
       "reform_house_population_1000                              0.03   \n",
       "reform_mean_floor_count_1000                              0.03   \n",
       "reform_mean_year_building_1000                            0.00   \n",
       "region                                                    0.22   \n",
       "total_square                                              0.00   \n",
       "date                                                      0.01   \n",
       "realty_type                                               0.03   \n",
       "price_type                                                0.01   \n",
       "\n",
       "                                   osm_catering_points_in_0.01  \\\n",
       "per_square_meter_price                                    0.48   \n",
       "floor                                                     0.06   \n",
       "osm_amenity_points_in_0.01                                0.96   \n",
       "osm_building_points_in_0.01                               0.02   \n",
       "osm_catering_points_in_0.01                               1.00   \n",
       "osm_city_closest_dist                                     0.05   \n",
       "osm_city_nearest_name                                     0.51   \n",
       "osm_city_nearest_population                               0.47   \n",
       "osm_crossing_closest_dist                                 0.00   \n",
       "osm_crossing_points_in_0.01                               0.80   \n",
       "osm_culture_points_in_0.01                                0.60   \n",
       "osm_healthcare_points_in_0.01                             0.80   \n",
       "osm_historic_points_in_0.01                               0.73   \n",
       "osm_hotels_points_in_0.01                                 0.88   \n",
       "osm_leisure_points_in_0.01                                0.68   \n",
       "osm_offices_points_in_0.01                                0.87   \n",
       "osm_shops_points_in_0.01                                  0.92   \n",
       "osm_subway_closest_dist                                   0.12   \n",
       "osm_train_stop_closest_dist                               0.02   \n",
       "osm_train_stop_points_in_0.01                             0.34   \n",
       "osm_transport_stop_closest_dist                           0.00   \n",
       "osm_transport_stop_points_in_0.01                         0.63   \n",
       "reform_count_of_houses_1000                               0.57   \n",
       "reform_house_population_1000                              0.60   \n",
       "reform_mean_floor_count_1000                              0.23   \n",
       "reform_mean_year_building_1000                            0.03   \n",
       "region                                                    0.40   \n",
       "total_square                                              0.05   \n",
       "date                                                      0.07   \n",
       "realty_type                                               0.19   \n",
       "price_type                                                0.20   \n",
       "\n",
       "                                   osm_city_closest_dist  \\\n",
       "per_square_meter_price                              0.05   \n",
       "floor                                               0.08   \n",
       "osm_amenity_points_in_0.01                          0.07   \n",
       "osm_building_points_in_0.01                         0.00   \n",
       "osm_catering_points_in_0.01                         0.05   \n",
       "osm_city_closest_dist                               1.00   \n",
       "osm_city_nearest_name                               0.80   \n",
       "osm_city_nearest_population                         0.11   \n",
       "osm_crossing_closest_dist                           0.73   \n",
       "osm_crossing_points_in_0.01                         0.22   \n",
       "osm_culture_points_in_0.01                          0.01   \n",
       "osm_healthcare_points_in_0.01                       0.07   \n",
       "osm_historic_points_in_0.01                         0.04   \n",
       "osm_hotels_points_in_0.01                           0.03   \n",
       "osm_leisure_points_in_0.01                          0.07   \n",
       "osm_offices_points_in_0.01                          0.05   \n",
       "osm_shops_points_in_0.01                            0.07   \n",
       "osm_subway_closest_dist                             0.41   \n",
       "osm_train_stop_closest_dist                         0.73   \n",
       "osm_train_stop_points_in_0.01                       0.01   \n",
       "osm_transport_stop_closest_dist                     0.73   \n",
       "osm_transport_stop_points_in_0.01                   0.15   \n",
       "reform_count_of_houses_1000                         0.09   \n",
       "reform_house_population_1000                        0.11   \n",
       "reform_mean_floor_count_1000                        0.13   \n",
       "reform_mean_year_building_1000                      0.00   \n",
       "region                                              0.40   \n",
       "total_square                                        0.00   \n",
       "date                                                0.02   \n",
       "realty_type                                         0.06   \n",
       "price_type                                          0.01   \n",
       "\n",
       "                                   osm_city_nearest_name  \\\n",
       "per_square_meter_price                              0.57   \n",
       "floor                                               0.28   \n",
       "osm_amenity_points_in_0.01                          0.56   \n",
       "osm_building_points_in_0.01                         0.28   \n",
       "osm_catering_points_in_0.01                         0.51   \n",
       "osm_city_closest_dist                               0.80   \n",
       "osm_city_nearest_name                               1.00   \n",
       "osm_city_nearest_population                         1.00   \n",
       "osm_crossing_closest_dist                           0.42   \n",
       "osm_crossing_points_in_0.01                         0.64   \n",
       "osm_culture_points_in_0.01                          0.46   \n",
       "osm_healthcare_points_in_0.01                       0.56   \n",
       "osm_historic_points_in_0.01                         0.45   \n",
       "osm_hotels_points_in_0.01                           0.44   \n",
       "osm_leisure_points_in_0.01                          0.57   \n",
       "osm_offices_points_in_0.01                          0.57   \n",
       "osm_shops_points_in_0.01                            0.57   \n",
       "osm_subway_closest_dist                             0.99   \n",
       "osm_train_stop_closest_dist                         0.88   \n",
       "osm_train_stop_points_in_0.01                       0.32   \n",
       "osm_transport_stop_closest_dist                     0.25   \n",
       "osm_transport_stop_points_in_0.01                   0.62   \n",
       "reform_count_of_houses_1000                         0.55   \n",
       "reform_house_population_1000                        0.48   \n",
       "reform_mean_floor_count_1000                        0.59   \n",
       "reform_mean_year_building_1000                      0.44   \n",
       "region                                              1.00   \n",
       "total_square                                        0.12   \n",
       "date                                                0.22   \n",
       "realty_type                                         0.37   \n",
       "price_type                                          0.30   \n",
       "\n",
       "                                   osm_city_nearest_population  \\\n",
       "per_square_meter_price                                    0.55   \n",
       "floor                                                     0.15   \n",
       "osm_amenity_points_in_0.01                                0.49   \n",
       "osm_building_points_in_0.01                               0.17   \n",
       "osm_catering_points_in_0.01                               0.47   \n",
       "osm_city_closest_dist                                     0.11   \n",
       "osm_city_nearest_name                                     1.00   \n",
       "osm_city_nearest_population                               1.00   \n",
       "osm_crossing_closest_dist                                 0.00   \n",
       "osm_crossing_points_in_0.01                               0.60   \n",
       "osm_culture_points_in_0.01                                0.22   \n",
       "osm_healthcare_points_in_0.01                             0.49   \n",
       "osm_historic_points_in_0.01                               0.35   \n",
       "osm_hotels_points_in_0.01                                 0.42   \n",
       "osm_leisure_points_in_0.01                                0.50   \n",
       "osm_offices_points_in_0.01                                0.52   \n",
       "osm_shops_points_in_0.01                                  0.49   \n",
       "osm_subway_closest_dist                                   0.31   \n",
       "osm_train_stop_closest_dist                               0.03   \n",
       "osm_train_stop_points_in_0.01                             0.29   \n",
       "osm_transport_stop_closest_dist                           0.01   \n",
       "osm_transport_stop_points_in_0.01                         0.49   \n",
       "reform_count_of_houses_1000                               0.20   \n",
       "reform_house_population_1000                              0.24   \n",
       "reform_mean_floor_count_1000                              0.31   \n",
       "reform_mean_year_building_1000                            0.05   \n",
       "region                                                    0.97   \n",
       "total_square                                              0.07   \n",
       "date                                                      0.14   \n",
       "realty_type                                               0.14   \n",
       "price_type                                                0.07   \n",
       "\n",
       "                                   osm_crossing_closest_dist  \\\n",
       "per_square_meter_price                                  0.00   \n",
       "floor                                                   0.01   \n",
       "osm_amenity_points_in_0.01                              0.00   \n",
       "osm_building_points_in_0.01                             0.00   \n",
       "osm_catering_points_in_0.01                             0.00   \n",
       "osm_city_closest_dist                                   0.73   \n",
       "osm_city_nearest_name                                   0.42   \n",
       "osm_city_nearest_population                             0.00   \n",
       "osm_crossing_closest_dist                               1.00   \n",
       "osm_crossing_points_in_0.01                             0.00   \n",
       "osm_culture_points_in_0.01                              0.00   \n",
       "osm_healthcare_points_in_0.01                           0.00   \n",
       "osm_historic_points_in_0.01                             0.00   \n",
       "osm_hotels_points_in_0.01                               0.00   \n",
       "osm_leisure_points_in_0.01                              0.00   \n",
       "osm_offices_points_in_0.01                              0.00   \n",
       "osm_shops_points_in_0.01                                0.00   \n",
       "osm_subway_closest_dist                                 0.32   \n",
       "osm_train_stop_closest_dist                             0.79   \n",
       "osm_train_stop_points_in_0.01                           0.00   \n",
       "osm_transport_stop_closest_dist                         0.88   \n",
       "osm_transport_stop_points_in_0.01                       0.02   \n",
       "reform_count_of_houses_1000                             0.01   \n",
       "reform_house_population_1000                            0.00   \n",
       "reform_mean_floor_count_1000                            0.01   \n",
       "reform_mean_year_building_1000                          0.00   \n",
       "region                                                  0.07   \n",
       "total_square                                            0.00   \n",
       "date                                                    0.00   \n",
       "realty_type                                             0.01   \n",
       "price_type                                              0.00   \n",
       "\n",
       "                                   osm_crossing_points_in_0.01  ...  \\\n",
       "per_square_meter_price                                    0.57  ...   \n",
       "floor                                                     0.14  ...   \n",
       "osm_amenity_points_in_0.01                                0.82  ...   \n",
       "osm_building_points_in_0.01                               0.11  ...   \n",
       "osm_catering_points_in_0.01                               0.80  ...   \n",
       "osm_city_closest_dist                                     0.22  ...   \n",
       "osm_city_nearest_name                                     0.64  ...   \n",
       "osm_city_nearest_population                               0.60  ...   \n",
       "osm_crossing_closest_dist                                 0.00  ...   \n",
       "osm_crossing_points_in_0.01                               1.00  ...   \n",
       "osm_culture_points_in_0.01                                0.62  ...   \n",
       "osm_healthcare_points_in_0.01                             0.81  ...   \n",
       "osm_historic_points_in_0.01                               0.76  ...   \n",
       "osm_hotels_points_in_0.01                                 0.71  ...   \n",
       "osm_leisure_points_in_0.01                                0.71  ...   \n",
       "osm_offices_points_in_0.01                                0.76  ...   \n",
       "osm_shops_points_in_0.01                                  0.79  ...   \n",
       "osm_subway_closest_dist                                   0.20  ...   \n",
       "osm_train_stop_closest_dist                               0.09  ...   \n",
       "osm_train_stop_points_in_0.01                             0.46  ...   \n",
       "osm_transport_stop_closest_dist                           0.00  ...   \n",
       "osm_transport_stop_points_in_0.01                         0.77  ...   \n",
       "reform_count_of_houses_1000                               0.67  ...   \n",
       "reform_house_population_1000                              0.59  ...   \n",
       "reform_mean_floor_count_1000                              0.41  ...   \n",
       "reform_mean_year_building_1000                            0.17  ...   \n",
       "region                                                    0.55  ...   \n",
       "total_square                                              0.18  ...   \n",
       "date                                                      0.17  ...   \n",
       "realty_type                                               0.31  ...   \n",
       "price_type                                                0.09  ...   \n",
       "\n",
       "                                   osm_transport_stop_points_in_0.01  \\\n",
       "per_square_meter_price                                          0.46   \n",
       "floor                                                           0.12   \n",
       "osm_amenity_points_in_0.01                                      0.69   \n",
       "osm_building_points_in_0.01                                     0.04   \n",
       "osm_catering_points_in_0.01                                     0.63   \n",
       "osm_city_closest_dist                                           0.15   \n",
       "osm_city_nearest_name                                           0.62   \n",
       "osm_city_nearest_population                                     0.49   \n",
       "osm_crossing_closest_dist                                       0.02   \n",
       "osm_crossing_points_in_0.01                                     0.77   \n",
       "osm_culture_points_in_0.01                                      0.34   \n",
       "osm_healthcare_points_in_0.01                                   0.68   \n",
       "osm_historic_points_in_0.01                                     0.52   \n",
       "osm_hotels_points_in_0.01                                       0.50   \n",
       "osm_leisure_points_in_0.01                                      0.58   \n",
       "osm_offices_points_in_0.01                                      0.61   \n",
       "osm_shops_points_in_0.01                                        0.67   \n",
       "osm_subway_closest_dist                                         0.18   \n",
       "osm_train_stop_closest_dist                                     0.06   \n",
       "osm_train_stop_points_in_0.01                                   0.25   \n",
       "osm_transport_stop_closest_dist                                 0.02   \n",
       "osm_transport_stop_points_in_0.01                               1.00   \n",
       "reform_count_of_houses_1000                                     0.52   \n",
       "reform_house_population_1000                                    0.45   \n",
       "reform_mean_floor_count_1000                                    0.33   \n",
       "reform_mean_year_building_1000                                  0.05   \n",
       "region                                                          0.52   \n",
       "total_square                                                    0.05   \n",
       "date                                                            0.08   \n",
       "realty_type                                                     0.20   \n",
       "price_type                                                      0.07   \n",
       "\n",
       "                                   reform_count_of_houses_1000  \\\n",
       "per_square_meter_price                                    0.16   \n",
       "floor                                                     0.03   \n",
       "osm_amenity_points_in_0.01                                0.63   \n",
       "osm_building_points_in_0.01                               0.03   \n",
       "osm_catering_points_in_0.01                               0.57   \n",
       "osm_city_closest_dist                                     0.09   \n",
       "osm_city_nearest_name                                     0.55   \n",
       "osm_city_nearest_population                               0.20   \n",
       "osm_crossing_closest_dist                                 0.01   \n",
       "osm_crossing_points_in_0.01                               0.67   \n",
       "osm_culture_points_in_0.01                                0.37   \n",
       "osm_healthcare_points_in_0.01                             0.53   \n",
       "osm_historic_points_in_0.01                               0.52   \n",
       "osm_hotels_points_in_0.01                                 0.52   \n",
       "osm_leisure_points_in_0.01                                0.40   \n",
       "osm_offices_points_in_0.01                                0.56   \n",
       "osm_shops_points_in_0.01                                  0.64   \n",
       "osm_subway_closest_dist                                   0.12   \n",
       "osm_train_stop_closest_dist                               0.03   \n",
       "osm_train_stop_points_in_0.01                             0.12   \n",
       "osm_transport_stop_closest_dist                           0.01   \n",
       "osm_transport_stop_points_in_0.01                         0.52   \n",
       "reform_count_of_houses_1000                               1.00   \n",
       "reform_house_population_1000                              0.55   \n",
       "reform_mean_floor_count_1000                              0.38   \n",
       "reform_mean_year_building_1000                            0.06   \n",
       "region                                                    0.43   \n",
       "total_square                                              0.05   \n",
       "date                                                      0.03   \n",
       "realty_type                                               0.13   \n",
       "price_type                                                0.13   \n",
       "\n",
       "                                   reform_house_population_1000  \\\n",
       "per_square_meter_price                                     0.19   \n",
       "floor                                                      0.10   \n",
       "osm_amenity_points_in_0.01                                 0.62   \n",
       "osm_building_points_in_0.01                                0.03   \n",
       "osm_catering_points_in_0.01                                0.60   \n",
       "osm_city_closest_dist                                      0.11   \n",
       "osm_city_nearest_name                                      0.48   \n",
       "osm_city_nearest_population                                0.24   \n",
       "osm_crossing_closest_dist                                  0.00   \n",
       "osm_crossing_points_in_0.01                                0.59   \n",
       "osm_culture_points_in_0.01                                 0.15   \n",
       "osm_healthcare_points_in_0.01                              0.42   \n",
       "osm_historic_points_in_0.01                                0.19   \n",
       "osm_hotels_points_in_0.01                                  0.56   \n",
       "osm_leisure_points_in_0.01                                 0.39   \n",
       "osm_offices_points_in_0.01                                 0.59   \n",
       "osm_shops_points_in_0.01                                   0.65   \n",
       "osm_subway_closest_dist                                    0.09   \n",
       "osm_train_stop_closest_dist                                0.05   \n",
       "osm_train_stop_points_in_0.01                              0.13   \n",
       "osm_transport_stop_closest_dist                            0.01   \n",
       "osm_transport_stop_points_in_0.01                          0.45   \n",
       "reform_count_of_houses_1000                                0.55   \n",
       "reform_house_population_1000                               1.00   \n",
       "reform_mean_floor_count_1000                               0.31   \n",
       "reform_mean_year_building_1000                             0.04   \n",
       "region                                                     0.36   \n",
       "total_square                                               0.02   \n",
       "date                                                       0.04   \n",
       "realty_type                                                0.20   \n",
       "price_type                                                 0.16   \n",
       "\n",
       "                                   reform_mean_floor_count_1000  \\\n",
       "per_square_meter_price                                     0.23   \n",
       "floor                                                      0.15   \n",
       "osm_amenity_points_in_0.01                                 0.25   \n",
       "osm_building_points_in_0.01                                0.03   \n",
       "osm_catering_points_in_0.01                                0.23   \n",
       "osm_city_closest_dist                                      0.13   \n",
       "osm_city_nearest_name                                      0.59   \n",
       "osm_city_nearest_population                                0.31   \n",
       "osm_crossing_closest_dist                                  0.01   \n",
       "osm_crossing_points_in_0.01                                0.41   \n",
       "osm_culture_points_in_0.01                                 0.12   \n",
       "osm_healthcare_points_in_0.01                              0.23   \n",
       "osm_historic_points_in_0.01                                0.19   \n",
       "osm_hotels_points_in_0.01                                  0.17   \n",
       "osm_leisure_points_in_0.01                                 0.27   \n",
       "osm_offices_points_in_0.01                                 0.27   \n",
       "osm_shops_points_in_0.01                                   0.25   \n",
       "osm_subway_closest_dist                                    0.15   \n",
       "osm_train_stop_closest_dist                                0.07   \n",
       "osm_train_stop_points_in_0.01                              0.12   \n",
       "osm_transport_stop_closest_dist                            0.02   \n",
       "osm_transport_stop_points_in_0.01                          0.33   \n",
       "reform_count_of_houses_1000                                0.38   \n",
       "reform_house_population_1000                               0.31   \n",
       "reform_mean_floor_count_1000                               1.00   \n",
       "reform_mean_year_building_1000                             0.08   \n",
       "region                                                     0.47   \n",
       "total_square                                               0.02   \n",
       "date                                                       0.06   \n",
       "realty_type                                                0.14   \n",
       "price_type                                                 0.05   \n",
       "\n",
       "                                   reform_mean_year_building_1000  region  \\\n",
       "per_square_meter_price                                       0.03    0.52   \n",
       "floor                                                        0.00    0.23   \n",
       "osm_amenity_points_in_0.01                                   0.04    0.45   \n",
       "osm_building_points_in_0.01                                  0.00    0.22   \n",
       "osm_catering_points_in_0.01                                  0.03    0.40   \n",
       "osm_city_closest_dist                                        0.00    0.40   \n",
       "osm_city_nearest_name                                        0.44    1.00   \n",
       "osm_city_nearest_population                                  0.05    0.97   \n",
       "osm_crossing_closest_dist                                    0.00    0.07   \n",
       "osm_crossing_points_in_0.01                                  0.17    0.55   \n",
       "osm_culture_points_in_0.01                                   0.00    0.39   \n",
       "osm_healthcare_points_in_0.01                                0.05    0.46   \n",
       "osm_historic_points_in_0.01                                  0.04    0.33   \n",
       "osm_hotels_points_in_0.01                                    0.01    0.36   \n",
       "osm_leisure_points_in_0.01                                   0.05    0.48   \n",
       "osm_offices_points_in_0.01                                   0.04    0.47   \n",
       "osm_shops_points_in_0.01                                     0.06    0.47   \n",
       "osm_subway_closest_dist                                      0.04    0.91   \n",
       "osm_train_stop_closest_dist                                  0.00    0.43   \n",
       "osm_train_stop_points_in_0.01                                0.05    0.26   \n",
       "osm_transport_stop_closest_dist                              0.00    0.14   \n",
       "osm_transport_stop_points_in_0.01                            0.05    0.52   \n",
       "reform_count_of_houses_1000                                  0.06    0.43   \n",
       "reform_house_population_1000                                 0.04    0.36   \n",
       "reform_mean_floor_count_1000                                 0.08    0.47   \n",
       "reform_mean_year_building_1000                               1.00    0.37   \n",
       "region                                                       0.37    1.00   \n",
       "total_square                                                 0.00    0.08   \n",
       "date                                                         0.02    0.17   \n",
       "realty_type                                                  0.02    0.28   \n",
       "price_type                                                   0.00    0.27   \n",
       "\n",
       "                                   total_square  date  realty_type  price_type  \n",
       "per_square_meter_price                     0.02  0.11         0.18        0.05  \n",
       "floor                                      0.01  0.22         0.04        0.00  \n",
       "osm_amenity_points_in_0.01                 0.05  0.07         0.18        0.22  \n",
       "osm_building_points_in_0.01                0.00  0.01         0.03        0.01  \n",
       "osm_catering_points_in_0.01                0.05  0.07         0.19        0.20  \n",
       "osm_city_closest_dist                      0.00  0.02         0.06        0.01  \n",
       "osm_city_nearest_name                      0.12  0.22         0.37        0.30  \n",
       "osm_city_nearest_population                0.07  0.14         0.14        0.07  \n",
       "osm_crossing_closest_dist                  0.00  0.00         0.01        0.00  \n",
       "osm_crossing_points_in_0.01                0.18  0.17         0.31        0.09  \n",
       "osm_culture_points_in_0.01                 0.04  0.03         0.07        0.04  \n",
       "osm_healthcare_points_in_0.01              0.06  0.07         0.13        0.04  \n",
       "osm_historic_points_in_0.01                0.08  0.05         0.14        0.05  \n",
       "osm_hotels_points_in_0.01                  0.05  0.05         0.08        0.21  \n",
       "osm_leisure_points_in_0.01                 0.06  0.08         0.14        0.09  \n",
       "osm_offices_points_in_0.01                 0.05  0.07         0.19        0.20  \n",
       "osm_shops_points_in_0.01                   0.03  0.07         0.17        0.20  \n",
       "osm_subway_closest_dist                    0.03  0.06         0.09        0.04  \n",
       "osm_train_stop_closest_dist                0.00  0.01         0.02        0.00  \n",
       "osm_train_stop_points_in_0.01              0.04  0.04         0.11        0.03  \n",
       "osm_transport_stop_closest_dist            0.00  0.00         0.02        0.00  \n",
       "osm_transport_stop_points_in_0.01          0.05  0.08         0.20        0.07  \n",
       "reform_count_of_houses_1000                0.05  0.03         0.13        0.13  \n",
       "reform_house_population_1000               0.02  0.04         0.20        0.16  \n",
       "reform_mean_floor_count_1000               0.02  0.06         0.14        0.05  \n",
       "reform_mean_year_building_1000             0.00  0.02         0.02        0.00  \n",
       "region                                     0.08  0.17         0.28        0.27  \n",
       "total_square                               1.00  0.02         0.04        0.01  \n",
       "date                                       0.02  1.00         0.10        0.02  \n",
       "realty_type                                0.04  0.10         1.00        0.02  \n",
       "price_type                                 0.01  0.02         0.02        1.00  \n",
       "\n",
       "[31 rows x 31 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# считаем корреляцию phik - она позволяет находитб взаимосвязи в том числе между категориальными переменными. \n",
    "# направление взаимосвязи не видно, только абсолютное значение. Чем ближе к единице, тем лучше\n",
    "\n",
    "# выделяем интервальные переменные\n",
    "interval_cols = ['osm_amenity_points_in_0.01', 'osm_building_points_in_0.01',\n",
    "       'osm_catering_points_in_0.01', 'osm_city_closest_dist',\n",
    "       'osm_city_nearest_population','osm_crossing_closest_dist', 'osm_crossing_points_in_0.001', 'osm_culture_points_in_0.01',\n",
    "       'osm_healthcare_points_in_0.01', 'osm_historic_points_in_0.01', 'osm_hotels_points_in_0.01',\n",
    "       'osm_leisure_points_in_0.01', 'osm_offices_points_in_0.01',\n",
    "       'osm_shops_points_in_0.01', 'osm_subway_closest_dist',\n",
    "       'osm_train_stop_closest_dist', 'osm_train_stop_points_in_0.01',\n",
    "       'osm_transport_stop_closest_dist', 'osm_transport_stop_points_in_0.01', 'per_square_meter_price',\n",
    "       'reform_count_of_houses_1000', 'reform_house_population_1000', \n",
    "       'reform_mean_floor_count_1000', 'reform_mean_year_building_1000',\n",
    "      'total_square', 'realty_type', 'price_type', 'many_floors',\n",
    "      'city', 'street']\n",
    "\n",
    "# строим матрицу корреляции\n",
    "phik_overview = train_data[columns_for_phik].phik_matrix(interval_cols=interval_cols)\n",
    "\n",
    "phik_overview.round(2)\n",
    "\n",
    "# визуализируем с помощью тепловой карты\n",
    "# fig, ax = plt.subplots(figsize=(20, 20))\n",
    "# sns.heatmap(phik_overview.round(2), annot=True, square=True, cmap='mako')\n",
    "# ax.set_title(label = 'МАТРИЦА КОРРЕЛЯЦИИ ПРИЗНАКОВ $\\phi_K$', fontdict={'fontsize': 15, 'fontweight': 'bold'})\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>phik</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>per_square_meter_price</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>osm_crossing_points_in_0.01</td>\n",
       "      <td>0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>osm_city_nearest_name</td>\n",
       "      <td>0.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>osm_city_nearest_population</td>\n",
       "      <td>0.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>region</td>\n",
       "      <td>0.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>osm_amenity_points_in_0.01</td>\n",
       "      <td>0.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>osm_catering_points_in_0.01</td>\n",
       "      <td>0.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>osm_leisure_points_in_0.01</td>\n",
       "      <td>0.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>osm_offices_points_in_0.01</td>\n",
       "      <td>0.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>osm_shops_points_in_0.01</td>\n",
       "      <td>0.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>osm_healthcare_points_in_0.01</td>\n",
       "      <td>0.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>osm_transport_stop_points_in_0.01</td>\n",
       "      <td>0.46</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              feature  phik\n",
       "0              per_square_meter_price  1.00\n",
       "9         osm_crossing_points_in_0.01  0.57\n",
       "6               osm_city_nearest_name  0.57\n",
       "7         osm_city_nearest_population  0.55\n",
       "26                             region  0.52\n",
       "2          osm_amenity_points_in_0.01  0.48\n",
       "4         osm_catering_points_in_0.01  0.48\n",
       "14         osm_leisure_points_in_0.01  0.47\n",
       "15         osm_offices_points_in_0.01  0.47\n",
       "16           osm_shops_points_in_0.01  0.47\n",
       "11      osm_healthcare_points_in_0.01  0.46\n",
       "21  osm_transport_stop_points_in_0.01  0.46"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Формируем список переменных с максимальным коэффициентов корреляции phik с целевой переменной \n",
    "phik_max_corr = (\n",
    "    phik_overview['per_square_meter_price'].to_frame().reset_index()\n",
    "    .rename(columns={'per_square_meter_price':'phik', 'index':'feature'})\n",
    "    .sort_values(by='phik', ascending=False)\n",
    "    .query('phik > 0.4')\n",
    "    .round(2)\n",
    "    )\n",
    "phik_max_corr\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Матрица корреляции phik показала максимальную взаимосвязь целевой переменной с пременными:\n",
    "- количество пешеходных переходов в радиусе 1 км\n",
    "- название ближайшего города\n",
    "- население ближайшего города\n",
    "- регион\n",
    "- количество в радиусе 1 км точек кейтеринга, досуга, офисов, магазинов, медучреждений, остановок общественного транспорта и объектов связаннных с удобством\n",
    "\n",
    "Также обнаружены новые взаимосвязи переменных между собой, которые не были видны на матрице корреляции Пирсона:\n",
    "- этаж и price_type\n",
    "- название близлежащего города и население ближайшего города, расстояние до ближайшего метро, остановки общественного транспорта, регион\n",
    "- регион и расстояние до ближайшего метро"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add features\n",
    "city_population = pd.read_csv('city_population.csv')\n",
    "zarplaty = pd.read_csv('zarplaty.csv', sep = ';')\n",
    "\n",
    "def city_type(row):\n",
    "    if row >=1000000:\n",
    "        return \"1Million\"\n",
    "    elif  (row<1000000)&(row >200000):\n",
    "        return \"Medium\"\n",
    "    elif  (row <=200000):\n",
    "        return \"Small\"\n",
    "    \n",
    "def floor_type(row):\n",
    "    if ('1' in str(row))&(row!=-1):\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "    \n",
    "def add_features(df):\n",
    "    df['age'] = round(2021 - df['reform_mean_year_building_500'])\n",
    "    df.city = df.city.apply(lambda x: x.lower())\n",
    "    \n",
    "    city_population_clean = city_population.groupby('settlement').agg({'population':'sum'}).reset_index()\n",
    "    city_population_clean.columns = ['city', 'city_population']\n",
    "    city_population_clean['city_population']\n",
    "    city_population_clean.city = city_population_clean.city.apply(lambda x: x.lower())\n",
    "    df = df.merge(city_population_clean, on = 'city', how='left')\n",
    "    \n",
    "    for col in df.select_dtypes(include=np.number).columns:\n",
    "        df[col] = pd.to_numeric(df[col], downcast = 'unsigned')\n",
    "    \n",
    "    df['city_type'] = df['city_population'].apply(lambda x: city_type(x))\n",
    "    df.loc[df.city  == 'москва', 'city_type'] = \"Capital\"\n",
    "    df.loc[df.city  == 'санкт-Петербург', 'city_type'] = \"Capital\"\n",
    "    \n",
    "    df = df.merge(zarplaty, on = 'region', how='left')\n",
    "    df['zarplata'] = pd.to_numeric(df['zarplata'], downcast = 'unsigned')\n",
    "    df['floor_type'] = df['floor'].apply(lambda x: floor_type(x))\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = add_features(train_data)\n",
    "test_data = add_features(test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((279967, 82), (2974, 81))"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.shape, test_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_to_float(x):\n",
    "    try:\n",
    "        return float(x)\n",
    "    except:\n",
    "        return np.nan\n",
    "    \n",
    "for data in [train_data, test_data]:\n",
    "    data['floor'] = data['floor'].map(convert_to_float).astype(float)\n",
    "    i = 2\n",
    "    data['lat_'+str(i)] = data['lat'].round(i)\n",
    "    data['lng_'+str(i)] = data['lng'].round(i)\n",
    "    data['square_ll'+str(i)] = data['lat_'+str(i)].astype(str) + '_' + data['lng_'+str(i)].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>floor</th>\n",
       "      <th>id</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "      <th>osm_amenity_points_in_0.001</th>\n",
       "      <th>osm_amenity_points_in_0.005</th>\n",
       "      <th>osm_amenity_points_in_0.0075</th>\n",
       "      <th>osm_amenity_points_in_0.01</th>\n",
       "      <th>osm_building_points_in_0.001</th>\n",
       "      <th>...</th>\n",
       "      <th>realty_type</th>\n",
       "      <th>price_type</th>\n",
       "      <th>age</th>\n",
       "      <th>city_population</th>\n",
       "      <th>city_type</th>\n",
       "      <th>zarplata</th>\n",
       "      <th>floor_type</th>\n",
       "      <th>lat_2</th>\n",
       "      <th>lng_2</th>\n",
       "      <th>square_ll2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>пермь</td>\n",
       "      <td>0.0</td>\n",
       "      <td>COL_0</td>\n",
       "      <td>57.998207</td>\n",
       "      <td>56.292797</td>\n",
       "      <td>4</td>\n",
       "      <td>19</td>\n",
       "      <td>35</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1048011.0</td>\n",
       "      <td>1Million</td>\n",
       "      <td>41958.0</td>\n",
       "      <td>0</td>\n",
       "      <td>58.00</td>\n",
       "      <td>56.29</td>\n",
       "      <td>58.0_56.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>шатура</td>\n",
       "      <td>0.0</td>\n",
       "      <td>COL_1</td>\n",
       "      <td>55.574284</td>\n",
       "      <td>39.543835</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>37</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>32885.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>58066.0</td>\n",
       "      <td>0</td>\n",
       "      <td>55.57</td>\n",
       "      <td>39.54</td>\n",
       "      <td>55.57_39.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ярославль</td>\n",
       "      <td>0.0</td>\n",
       "      <td>COL_2</td>\n",
       "      <td>57.619140</td>\n",
       "      <td>39.850525</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>67</td>\n",
       "      <td>128</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>110</td>\n",
       "      <td>0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>604128.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>57.62</td>\n",
       "      <td>39.85</td>\n",
       "      <td>57.62_39.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>новокузнецк</td>\n",
       "      <td>0.0</td>\n",
       "      <td>COL_3</td>\n",
       "      <td>53.897083</td>\n",
       "      <td>87.108604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>110</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>551919.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>43429.0</td>\n",
       "      <td>0</td>\n",
       "      <td>53.90</td>\n",
       "      <td>87.11</td>\n",
       "      <td>53.9_87.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>москва</td>\n",
       "      <td>0.0</td>\n",
       "      <td>COL_4</td>\n",
       "      <td>55.802590</td>\n",
       "      <td>37.487110</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>64</td>\n",
       "      <td>153</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>12380691.0</td>\n",
       "      <td>Capital</td>\n",
       "      <td>100070.0</td>\n",
       "      <td>0</td>\n",
       "      <td>55.80</td>\n",
       "      <td>37.49</td>\n",
       "      <td>55.8_37.49</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 85 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          city  floor     id        lat        lng  \\\n",
       "0        пермь    0.0  COL_0  57.998207  56.292797   \n",
       "1       шатура    0.0  COL_1  55.574284  39.543835   \n",
       "2    ярославль    0.0  COL_2  57.619140  39.850525   \n",
       "3  новокузнецк    0.0  COL_3  53.897083  87.108604   \n",
       "4       москва    0.0  COL_4  55.802590  37.487110   \n",
       "\n",
       "   osm_amenity_points_in_0.001  osm_amenity_points_in_0.005  \\\n",
       "0                            4                           19   \n",
       "1                            3                           24   \n",
       "2                            1                           30   \n",
       "3                            0                            0   \n",
       "4                            1                           23   \n",
       "\n",
       "   osm_amenity_points_in_0.0075  osm_amenity_points_in_0.01  \\\n",
       "0                            35                          52   \n",
       "1                            37                          59   \n",
       "2                            67                         128   \n",
       "3                             5                          21   \n",
       "4                            64                         153   \n",
       "\n",
       "   osm_building_points_in_0.001  ...  realty_type  price_type   age  \\\n",
       "0                             0  ...           10           0  60.0   \n",
       "1                             0  ...           10           0  64.0   \n",
       "2                             0  ...          110           0  48.0   \n",
       "3                             0  ...          110           0   7.0   \n",
       "4                             0  ...           10           0  60.0   \n",
       "\n",
       "   city_population  city_type  zarplata  floor_type  lat_2  lng_2   square_ll2  \n",
       "0        1048011.0   1Million   41958.0           0  58.00  56.29   58.0_56.29  \n",
       "1          32885.0      Small   58066.0           0  55.57  39.54  55.57_39.54  \n",
       "2         604128.0     Medium       NaN           0  57.62  39.85  57.62_39.85  \n",
       "3         551919.0     Medium   43429.0           0  53.90  87.11   53.9_87.11  \n",
       "4       12380691.0    Capital  100070.0           0  55.80  37.49   55.8_37.49  \n",
       "\n",
       "[5 rows x 85 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = train_data.query('price_type == 1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data.replace('1', 1, inplace=True)\n",
    "train_data.replace('1.0', 1, inplace=True)\n",
    "test_data.replace('1', 1, inplace=True)\n",
    "test_data.replace('1.0', 1, inplace=True)\n",
    "\n",
    "train_data['floor2'] = train_data.apply(lambda row: 1 if row['floor'] == 1 else 0, axis=1)\n",
    "test_data['floor2'] = test_data.apply(lambda row: 1 if row['floor'] == 1 else 0, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "id": "811f6b6d"
   },
   "outputs": [],
   "source": [
    "N_THREADS = 64 # threads cnt for lgbm and linear models\n",
    "N_FOLDS = 5 # folds cnt for AutoML\n",
    "RANDOM_STATE = 42 # fixed random state for various reasons\n",
    "#TEST_SIZE = 0.1 # Test size for metric check\n",
    "TIMEOUT = 5 * 3600 # Time in seconds for automl run USE TIMEOUT = 1700 for perfect score\n",
    "\n",
    "np.random.seed(RANDOM_STATE)\n",
    "torch.set_num_threads(N_THREADS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "id": "e6d51e72"
   },
   "outputs": [],
   "source": [
    "# train_df, test_df = train_test_split(train_data, \n",
    "#                                      test_size=TEST_SIZE, \n",
    "#                                      random_state=RANDOM_STATE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "THRESHOLD = 0.15\n",
    "NEGATIVE_WEIGHT = 1.1\n",
    "\n",
    "def deviation_metric_vec(y_true: np.array, y_pred: np.array) -> float:\n",
    "    deviation = (y_pred - y_true) / np.maximum(1e-8, y_true)\n",
    "    \n",
    "    metr = deviation * 0.0 + 9\n",
    "    \n",
    "    metr[np.abs(deviation) <= THRESHOLD] = 0\n",
    "    \n",
    "    metr[deviation <= - 4 * THRESHOLD] = 9 * NEGATIVE_WEIGHT\n",
    "    \n",
    "    mask = (-4 * THRESHOLD < deviation) & (deviation < -THRESHOLD)\n",
    "    metr[mask] = NEGATIVE_WEIGHT * ((deviation[mask] / THRESHOLD) + 1) ** 2\n",
    "    \n",
    "    mask = (deviation < 4 * THRESHOLD) & (deviation > THRESHOLD)\n",
    "    metr[mask] = ((deviation[mask] / THRESHOLD) - 1) ** 2\n",
    "    \n",
    "    return metr.mean()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports from our package\n",
    "from lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\n",
    "from lightautoml.tasks import Task\n",
    "from lightautoml.dataset.roles import DatetimeRole"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "id": "11901a60"
   },
   "outputs": [],
   "source": [
    "task = Task('reg', loss = 'rmsle', metric = deviation_metric_vec)\n",
    "\n",
    "roles = {\n",
    "    'target': 'per_square_meter_price',\n",
    "    DatetimeRole(base_date=False, base_feats=True, seasonality=('d', 'wd')): 'date',\n",
    "    'drop': 'id'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 800
    },
    "id": "c77216e8",
    "outputId": "ae6a7952-b341-40ed-f000-00f38639be74"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] Start automl preset with listed constraints:\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] - time: 18000.00 seconds\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] - cpus: 64 cores\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] - memory: 16 gb\n",
      "\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] \u001b[1mTrain data shape: (4493, 85)\u001b[0m\n",
      "\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] Feats was rejected during automatic roles guess: []\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] \u001b[1mLayer 1\u001b[0m ...\n",
      "\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] Layer 1 train process start. Time left 17983.04 secs\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] Start fitting \u001b[1mSelector_LightGBM\u001b[0m ...\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 16, 'feature_fraction': 0.9, 'bagging_fraction': 0.9, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 1, 'reg_lambda': 0.0, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.178165\tvalid's Opt metric: 2.48007\n",
      "[200]\tvalid's l2: 0.139554\tvalid's Opt metric: 2.05173\n",
      "[300]\tvalid's l2: 0.126964\tvalid's Opt metric: 1.86187\n",
      "[400]\tvalid's l2: 0.121543\tvalid's Opt metric: 1.76614\n",
      "[500]\tvalid's l2: 0.11881\tvalid's Opt metric: 1.71697\n",
      "[600]\tvalid's l2: 0.117196\tvalid's Opt metric: 1.68479\n",
      "[700]\tvalid's l2: 0.115981\tvalid's Opt metric: 1.66556\n",
      "[800]\tvalid's l2: 0.115327\tvalid's Opt metric: 1.65308\n",
      "[900]\tvalid's l2: 0.114554\tvalid's Opt metric: 1.63992\n",
      "[1000]\tvalid's l2: 0.114099\tvalid's Opt metric: 1.63152\n",
      "[1100]\tvalid's l2: 0.113754\tvalid's Opt metric: 1.62218\n",
      "[1200]\tvalid's l2: 0.113277\tvalid's Opt metric: 1.61243\n",
      "[1300]\tvalid's l2: 0.112747\tvalid's Opt metric: 1.604\n",
      "[1400]\tvalid's l2: 0.112541\tvalid's Opt metric: 1.59863\n",
      "[1500]\tvalid's l2: 0.112399\tvalid's Opt metric: 1.59414\n",
      "[1600]\tvalid's l2: 0.112225\tvalid's Opt metric: 1.58652\n",
      "[1700]\tvalid's l2: 0.112147\tvalid's Opt metric: 1.58265\n",
      "[1800]\tvalid's l2: 0.111927\tvalid's Opt metric: 1.57461\n",
      "[1900]\tvalid's l2: 0.111843\tvalid's Opt metric: 1.57213\n",
      "[2000]\tvalid's l2: 0.111625\tvalid's Opt metric: 1.56681\n",
      "[2100]\tvalid's l2: 0.111491\tvalid's Opt metric: 1.56141\n",
      "[2200]\tvalid's l2: 0.111508\tvalid's Opt metric: 1.55907\n",
      "Early stopping, best iteration is:\n",
      "[2091]\tvalid's l2: 0.111449\tvalid's Opt metric: 1.56121\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] \u001b[1mSelector_LightGBM\u001b[0m fitting and predicting completed\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] Optuna may run 16043.755534887314 secs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:02:39,319]\u001b[0m A new study created in memory with name: no-name-491fe56f-9a4a-430c-aaec-eadc3be61e52\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 108, 'feature_fraction': 0.6872700594236812, 'bagging_fraction': 0.5917173949330818, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.0023531598052637494, 'reg_lambda': 0.00010291881465670109, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 1.3145103232150122, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.162854\tvalid's Opt metric: 2.24574\n",
      "[200]\tvalid's l2: 0.127591\tvalid's Opt metric: 1.82796\n",
      "[300]\tvalid's l2: 0.120201\tvalid's Opt metric: 1.7072\n",
      "[400]\tvalid's l2: 0.1173\tvalid's Opt metric: 1.6605\n",
      "[500]\tvalid's l2: 0.115966\tvalid's Opt metric: 1.62863\n",
      "[600]\tvalid's l2: 0.114828\tvalid's Opt metric: 1.60211\n",
      "[700]\tvalid's l2: 0.114284\tvalid's Opt metric: 1.58609\n",
      "[800]\tvalid's l2: 0.113804\tvalid's Opt metric: 1.56934\n",
      "[900]\tvalid's l2: 0.113771\tvalid's Opt metric: 1.56532\n",
      "[1000]\tvalid's l2: 0.113672\tvalid's Opt metric: 1.55614\n",
      "[1100]\tvalid's l2: 0.113265\tvalid's Opt metric: 1.54801\n",
      "[1200]\tvalid's l2: 0.113065\tvalid's Opt metric: 1.54135\n",
      "[1300]\tvalid's l2: 0.112882\tvalid's Opt metric: 1.53727\n",
      "[1400]\tvalid's l2: 0.112789\tvalid's Opt metric: 1.5342\n",
      "[1500]\tvalid's l2: 0.112815\tvalid's Opt metric: 1.53271\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:02:59,682]\u001b[0m Trial 0 finished with value: -1.5351299972137153 and parameters: {'feature_fraction': 0.6872700594236812, 'num_leaves': 108, 'bagging_fraction': 0.5917173949330818, 'min_sum_hessian_in_leaf': 1.3145103232150122, 'reg_alpha': 0.0023531598052637494, 'reg_lambda': 0.00010291881465670109}. Best is trial 0 with value: -1.5351299972137153.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1336]\tvalid's l2: 0.11268\tvalid's Opt metric: 1.53513\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 218, 'feature_fraction': 0.5499874579090014, 'bagging_fraction': 0.9330880728874675, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.023585940584142682, 'reg_lambda': 1.5320059381854043e-08, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.2537815508265665, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.163648\tvalid's Opt metric: 2.23815\n",
      "[200]\tvalid's l2: 0.12927\tvalid's Opt metric: 1.81432\n",
      "[300]\tvalid's l2: 0.121446\tvalid's Opt metric: 1.68845\n",
      "[400]\tvalid's l2: 0.118971\tvalid's Opt metric: 1.6411\n",
      "[500]\tvalid's l2: 0.117818\tvalid's Opt metric: 1.6108\n",
      "[600]\tvalid's l2: 0.117057\tvalid's Opt metric: 1.58779\n",
      "[700]\tvalid's l2: 0.116775\tvalid's Opt metric: 1.57746\n",
      "[800]\tvalid's l2: 0.116381\tvalid's Opt metric: 1.56719\n",
      "[900]\tvalid's l2: 0.116107\tvalid's Opt metric: 1.55892\n",
      "[1000]\tvalid's l2: 0.115906\tvalid's Opt metric: 1.55384\n",
      "[1100]\tvalid's l2: 0.115746\tvalid's Opt metric: 1.55091\n",
      "[1200]\tvalid's l2: 0.115602\tvalid's Opt metric: 1.54693\n",
      "[1300]\tvalid's l2: 0.115638\tvalid's Opt metric: 1.54663\n",
      "[1400]\tvalid's l2: 0.11549\tvalid's Opt metric: 1.54471\n",
      "[1500]\tvalid's l2: 0.115407\tvalid's Opt metric: 1.54255\n",
      "[1600]\tvalid's l2: 0.115435\tvalid's Opt metric: 1.54376\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:03:37,918]\u001b[0m Trial 1 finished with value: -1.542478685458183 and parameters: {'feature_fraction': 0.5499874579090014, 'num_leaves': 218, 'bagging_fraction': 0.9330880728874675, 'min_sum_hessian_in_leaf': 0.2537815508265665, 'reg_alpha': 0.023585940584142682, 'reg_lambda': 1.5320059381854043e-08}. Best is trial 0 with value: -1.5351299972137153.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1482]\tvalid's l2: 0.115379\tvalid's Opt metric: 1.54248\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 251, 'feature_fraction': 0.9849549260809971, 'bagging_fraction': 0.9692763545078751, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 8.509499823666633, 'reg_lambda': 0.0036085571407386235, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.0010071984838809194, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.180307\tvalid's Opt metric: 2.47589\n",
      "[200]\tvalid's l2: 0.1428\tvalid's Opt metric: 2.13576\n",
      "[300]\tvalid's l2: 0.131565\tvalid's Opt metric: 1.99568\n",
      "[400]\tvalid's l2: 0.12744\tvalid's Opt metric: 1.93974\n",
      "[500]\tvalid's l2: 0.125154\tvalid's Opt metric: 1.89559\n",
      "[600]\tvalid's l2: 0.123981\tvalid's Opt metric: 1.87169\n",
      "[700]\tvalid's l2: 0.12324\tvalid's Opt metric: 1.85383\n",
      "[800]\tvalid's l2: 0.122608\tvalid's Opt metric: 1.84249\n",
      "[900]\tvalid's l2: 0.1223\tvalid's Opt metric: 1.83319\n",
      "[1000]\tvalid's l2: 0.122038\tvalid's Opt metric: 1.82798\n",
      "[1100]\tvalid's l2: 0.121869\tvalid's Opt metric: 1.8233\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:03:45,613]\u001b[0m Trial 2 finished with value: -1.818529064983803 and parameters: {'feature_fraction': 0.9849549260809971, 'num_leaves': 251, 'bagging_fraction': 0.9692763545078751, 'min_sum_hessian_in_leaf': 0.0010071984838809194, 'reg_alpha': 8.509499823666633, 'reg_lambda': 0.0036085571407386235}. Best is trial 0 with value: -1.5351299972137153.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1200]\tvalid's l2: 0.121744\tvalid's Opt metric: 1.81848\n",
      "[1300]\tvalid's l2: 0.121744\tvalid's Opt metric: 1.81848\n",
      "Early stopping, best iteration is:\n",
      "[1186]\tvalid's l2: 0.121724\tvalid's Opt metric: 1.81853\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 251, 'feature_fraction': 0.8058265802441404, 'bagging_fraction': 0.5115312125207079, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 3.9696182670988566e-05, 'reg_lambda': 2.630213296503227e-08, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.12563152773938666, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.162896\tvalid's Opt metric: 2.24048\n",
      "[200]\tvalid's l2: 0.12745\tvalid's Opt metric: 1.82706\n",
      "[300]\tvalid's l2: 0.119257\tvalid's Opt metric: 1.69999\n",
      "[400]\tvalid's l2: 0.116384\tvalid's Opt metric: 1.64513\n",
      "[500]\tvalid's l2: 0.114857\tvalid's Opt metric: 1.60903\n",
      "[600]\tvalid's l2: 0.114055\tvalid's Opt metric: 1.59416\n",
      "[700]\tvalid's l2: 0.113762\tvalid's Opt metric: 1.57539\n",
      "[800]\tvalid's l2: 0.113468\tvalid's Opt metric: 1.56316\n",
      "[900]\tvalid's l2: 0.113213\tvalid's Opt metric: 1.54845\n",
      "[1000]\tvalid's l2: 0.113222\tvalid's Opt metric: 1.53705\n",
      "[1100]\tvalid's l2: 0.112819\tvalid's Opt metric: 1.52676\n",
      "[1200]\tvalid's l2: 0.112645\tvalid's Opt metric: 1.52141\n",
      "[1300]\tvalid's l2: 0.112334\tvalid's Opt metric: 1.5143\n",
      "[1400]\tvalid's l2: 0.112137\tvalid's Opt metric: 1.5092\n",
      "[1500]\tvalid's l2: 0.112062\tvalid's Opt metric: 1.50188\n",
      "[1600]\tvalid's l2: 0.112047\tvalid's Opt metric: 1.49947\n",
      "[1700]\tvalid's l2: 0.11197\tvalid's Opt metric: 1.49598\n",
      "[1800]\tvalid's l2: 0.112011\tvalid's Opt metric: 1.49535\n",
      "[1900]\tvalid's l2: 0.112141\tvalid's Opt metric: 1.49531\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:04:07,686]\u001b[0m Trial 3 finished with value: -1.4946353519432116 and parameters: {'feature_fraction': 0.8058265802441404, 'num_leaves': 251, 'bagging_fraction': 0.5115312125207079, 'min_sum_hessian_in_leaf': 0.12563152773938666, 'reg_alpha': 3.9696182670988566e-05, 'reg_lambda': 2.630213296503227e-08}. Best is trial 3 with value: -1.4946353519432116.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1742]\tvalid's l2: 0.111874\tvalid's Opt metric: 1.49464\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 30, 'feature_fraction': 0.9868777594207296, 'bagging_fraction': 0.728034992108518, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 6.267062696005991e-07, 'reg_lambda': 0.00042472707398058225, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 1.382623217936987, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.166819\tvalid's Opt metric: 2.28911\n",
      "[200]\tvalid's l2: 0.131327\tvalid's Opt metric: 1.86174\n",
      "[300]\tvalid's l2: 0.122352\tvalid's Opt metric: 1.73321\n",
      "[400]\tvalid's l2: 0.119304\tvalid's Opt metric: 1.68693\n",
      "[500]\tvalid's l2: 0.117897\tvalid's Opt metric: 1.65845\n",
      "[600]\tvalid's l2: 0.117095\tvalid's Opt metric: 1.64246\n",
      "[700]\tvalid's l2: 0.116779\tvalid's Opt metric: 1.62919\n",
      "[800]\tvalid's l2: 0.116241\tvalid's Opt metric: 1.61434\n",
      "[900]\tvalid's l2: 0.115975\tvalid's Opt metric: 1.60323\n",
      "[1000]\tvalid's l2: 0.1159\tvalid's Opt metric: 1.59571\n",
      "[1100]\tvalid's l2: 0.115586\tvalid's Opt metric: 1.5829\n",
      "[1200]\tvalid's l2: 0.115567\tvalid's Opt metric: 1.57936\n",
      "[1300]\tvalid's l2: 0.11549\tvalid's Opt metric: 1.57278\n",
      "[1400]\tvalid's l2: 0.115332\tvalid's Opt metric: 1.56436\n",
      "[1500]\tvalid's l2: 0.115373\tvalid's Opt metric: 1.56579\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:04:17,036]\u001b[0m Trial 4 finished with value: -1.5665177881588712 and parameters: {'feature_fraction': 0.9868777594207296, 'num_leaves': 30, 'bagging_fraction': 0.728034992108518, 'min_sum_hessian_in_leaf': 1.382623217936987, 'reg_alpha': 6.267062696005991e-07, 'reg_lambda': 0.00042472707398058225}. Best is trial 3 with value: -1.4946353519432116.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1366]\tvalid's l2: 0.115288\tvalid's Opt metric: 1.56652\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 146, 'feature_fraction': 0.7962072844310213, 'bagging_fraction': 0.9299702033681603, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.00011336872639641431, 'reg_lambda': 1.316390230170444e-08, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.5262961031076743, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.161881\tvalid's Opt metric: 2.21538\n",
      "[200]\tvalid's l2: 0.128273\tvalid's Opt metric: 1.79247\n",
      "[300]\tvalid's l2: 0.120262\tvalid's Opt metric: 1.66391\n",
      "[400]\tvalid's l2: 0.118241\tvalid's Opt metric: 1.60817\n",
      "[500]\tvalid's l2: 0.117052\tvalid's Opt metric: 1.57729\n",
      "[600]\tvalid's l2: 0.116632\tvalid's Opt metric: 1.56309\n",
      "[700]\tvalid's l2: 0.116347\tvalid's Opt metric: 1.55009\n",
      "[800]\tvalid's l2: 0.116031\tvalid's Opt metric: 1.54013\n",
      "[900]\tvalid's l2: 0.115821\tvalid's Opt metric: 1.53529\n",
      "[1000]\tvalid's l2: 0.115607\tvalid's Opt metric: 1.53291\n",
      "[1100]\tvalid's l2: 0.115495\tvalid's Opt metric: 1.53029\n",
      "[1200]\tvalid's l2: 0.115466\tvalid's Opt metric: 1.52984\n",
      "[1300]\tvalid's l2: 0.11545\tvalid's Opt metric: 1.52999\n",
      "[1400]\tvalid's l2: 0.115371\tvalid's Opt metric: 1.52911\n",
      "[1500]\tvalid's l2: 0.115397\tvalid's Opt metric: 1.52974\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:04:52,076]\u001b[0m Trial 5 finished with value: -1.5283787465826353 and parameters: {'feature_fraction': 0.7962072844310213, 'num_leaves': 146, 'bagging_fraction': 0.9299702033681603, 'min_sum_hessian_in_leaf': 0.5262961031076743, 'reg_alpha': 0.00011336872639641431, 'reg_lambda': 1.316390230170444e-08}. Best is trial 3 with value: -1.4946353519432116.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1356]\tvalid's l2: 0.115361\tvalid's Opt metric: 1.52838\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 29, 'feature_fraction': 0.9711008778424264, 'bagging_fraction': 0.9041986740582306, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 7.569183361880229e-08, 'reg_lambda': 0.014391207615728067, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.01653693718282442, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.168223\tvalid's Opt metric: 2.27977\n",
      "[200]\tvalid's l2: 0.13216\tvalid's Opt metric: 1.85074\n",
      "[300]\tvalid's l2: 0.12309\tvalid's Opt metric: 1.7159\n",
      "[400]\tvalid's l2: 0.120605\tvalid's Opt metric: 1.67095\n",
      "[500]\tvalid's l2: 0.119477\tvalid's Opt metric: 1.64613\n",
      "[600]\tvalid's l2: 0.119098\tvalid's Opt metric: 1.6356\n",
      "[700]\tvalid's l2: 0.11872\tvalid's Opt metric: 1.62388\n",
      "[800]\tvalid's l2: 0.118404\tvalid's Opt metric: 1.61044\n",
      "[900]\tvalid's l2: 0.118054\tvalid's Opt metric: 1.60181\n",
      "[1000]\tvalid's l2: 0.117885\tvalid's Opt metric: 1.59555\n",
      "[1100]\tvalid's l2: 0.117847\tvalid's Opt metric: 1.5912\n",
      "[1200]\tvalid's l2: 0.117933\tvalid's Opt metric: 1.59121\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:04:59,740]\u001b[0m Trial 6 finished with value: -1.5914926961707605 and parameters: {'feature_fraction': 0.9711008778424264, 'num_leaves': 29, 'bagging_fraction': 0.9041986740582306, 'min_sum_hessian_in_leaf': 0.01653693718282442, 'reg_alpha': 7.569183361880229e-08, 'reg_lambda': 0.014391207615728067}. Best is trial 3 with value: -1.4946353519432116.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1059]\tvalid's l2: 0.117775\tvalid's Opt metric: 1.59149\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 214, 'feature_fraction': 0.7200762468698007, 'bagging_fraction': 0.8049983288913105, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 3.6331378936352306e-07, 'reg_lambda': 3.307847415252541e-05, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 2.1516897298083326, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.161973\tvalid's Opt metric: 2.22572\n",
      "[200]\tvalid's l2: 0.126939\tvalid's Opt metric: 1.78181\n",
      "[300]\tvalid's l2: 0.119439\tvalid's Opt metric: 1.65608\n",
      "[400]\tvalid's l2: 0.116852\tvalid's Opt metric: 1.602\n",
      "[500]\tvalid's l2: 0.115699\tvalid's Opt metric: 1.57013\n",
      "[600]\tvalid's l2: 0.115129\tvalid's Opt metric: 1.55113\n",
      "[700]\tvalid's l2: 0.114627\tvalid's Opt metric: 1.54076\n",
      "[800]\tvalid's l2: 0.114482\tvalid's Opt metric: 1.53283\n",
      "[900]\tvalid's l2: 0.114436\tvalid's Opt metric: 1.52763\n",
      "[1000]\tvalid's l2: 0.114203\tvalid's Opt metric: 1.51931\n",
      "[1100]\tvalid's l2: 0.114015\tvalid's Opt metric: 1.51282\n",
      "[1200]\tvalid's l2: 0.113931\tvalid's Opt metric: 1.51075\n",
      "[1300]\tvalid's l2: 0.113882\tvalid's Opt metric: 1.51142\n",
      "[1400]\tvalid's l2: 0.113849\tvalid's Opt metric: 1.5095\n",
      "[1500]\tvalid's l2: 0.113858\tvalid's Opt metric: 1.51093\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:05:29,347]\u001b[0m Trial 7 finished with value: -1.509099962278922 and parameters: {'feature_fraction': 0.7200762468698007, 'num_leaves': 214, 'bagging_fraction': 0.8049983288913105, 'min_sum_hessian_in_leaf': 2.1516897298083326, 'reg_alpha': 3.6331378936352306e-07, 'reg_lambda': 3.307847415252541e-05}. Best is trial 3 with value: -1.4946353519432116.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1388]\tvalid's l2: 0.113841\tvalid's Opt metric: 1.5091\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 147, 'feature_fraction': 0.5911180438940311, 'bagging_fraction': 0.6558555380447055, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.0008325158565947976, 'reg_lambda': 4.609885087947832e-07, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.12030178871154672, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.163384\tvalid's Opt metric: 2.23642\n",
      "[200]\tvalid's l2: 0.127446\tvalid's Opt metric: 1.80543\n",
      "[300]\tvalid's l2: 0.11985\tvalid's Opt metric: 1.67963\n",
      "[400]\tvalid's l2: 0.11677\tvalid's Opt metric: 1.62401\n",
      "[500]\tvalid's l2: 0.115218\tvalid's Opt metric: 1.58581\n",
      "[600]\tvalid's l2: 0.114257\tvalid's Opt metric: 1.55479\n",
      "[700]\tvalid's l2: 0.113723\tvalid's Opt metric: 1.53644\n",
      "[800]\tvalid's l2: 0.11352\tvalid's Opt metric: 1.52924\n",
      "[900]\tvalid's l2: 0.112975\tvalid's Opt metric: 1.52007\n",
      "[1000]\tvalid's l2: 0.112687\tvalid's Opt metric: 1.51412\n",
      "[1100]\tvalid's l2: 0.112209\tvalid's Opt metric: 1.5051\n",
      "[1200]\tvalid's l2: 0.112064\tvalid's Opt metric: 1.49787\n",
      "[1300]\tvalid's l2: 0.111938\tvalid's Opt metric: 1.49341\n",
      "[1400]\tvalid's l2: 0.111839\tvalid's Opt metric: 1.49247\n",
      "[1500]\tvalid's l2: 0.111705\tvalid's Opt metric: 1.4881\n",
      "[1600]\tvalid's l2: 0.111776\tvalid's Opt metric: 1.48605\n",
      "[1700]\tvalid's l2: 0.111686\tvalid's Opt metric: 1.48185\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:05:54,931]\u001b[0m Trial 8 finished with value: -1.4866729596336794 and parameters: {'feature_fraction': 0.5911180438940311, 'num_leaves': 147, 'bagging_fraction': 0.6558555380447055, 'min_sum_hessian_in_leaf': 0.12030178871154672, 'reg_alpha': 0.0008325158565947976, 'reg_lambda': 4.609885087947832e-07}. Best is trial 8 with value: -1.4866729596336794.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1518]\tvalid's l2: 0.111628\tvalid's Opt metric: 1.48667\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 233, 'feature_fraction': 0.9847923138822793, 'bagging_fraction': 0.7248770666848828, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 2.1874079799487576, 'reg_lambda': 0.0351113851431067, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.03807158379249393, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.170949\tvalid's Opt metric: 2.36246\n",
      "[200]\tvalid's l2: 0.132826\tvalid's Opt metric: 1.9346\n",
      "[300]\tvalid's l2: 0.122571\tvalid's Opt metric: 1.76686\n",
      "[400]\tvalid's l2: 0.118853\tvalid's Opt metric: 1.72401\n",
      "[500]\tvalid's l2: 0.117205\tvalid's Opt metric: 1.70204\n",
      "[600]\tvalid's l2: 0.116356\tvalid's Opt metric: 1.68008\n",
      "[700]\tvalid's l2: 0.116211\tvalid's Opt metric: 1.67577\n",
      "[800]\tvalid's l2: 0.116016\tvalid's Opt metric: 1.66498\n",
      "[900]\tvalid's l2: 0.115933\tvalid's Opt metric: 1.65632\n",
      "[1000]\tvalid's l2: 0.115766\tvalid's Opt metric: 1.65209\n",
      "[1100]\tvalid's l2: 0.115626\tvalid's Opt metric: 1.64605\n",
      "[1200]\tvalid's l2: 0.11552\tvalid's Opt metric: 1.64149\n",
      "[1300]\tvalid's l2: 0.11562\tvalid's Opt metric: 1.63887\n",
      "[1400]\tvalid's l2: 0.115564\tvalid's Opt metric: 1.63829\n",
      "[1500]\tvalid's l2: 0.115504\tvalid's Opt metric: 1.63581\n",
      "[1600]\tvalid's l2: 0.115596\tvalid's Opt metric: 1.6331\n",
      "[1700]\tvalid's l2: 0.115562\tvalid's Opt metric: 1.63142\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:06:14,431]\u001b[0m Trial 9 finished with value: -1.633406900843187 and parameters: {'feature_fraction': 0.9847923138822793, 'num_leaves': 233, 'bagging_fraction': 0.7248770666848828, 'min_sum_hessian_in_leaf': 0.03807158379249393, 'reg_alpha': 2.1874079799487576, 'reg_lambda': 0.0351113851431067}. Best is trial 8 with value: -1.4866729596336794.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1543]\tvalid's l2: 0.115437\tvalid's Opt metric: 1.63341\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 142, 'feature_fraction': 0.518532892035075, 'bagging_fraction': 0.6179086794065818, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.0652009782814182, 'reg_lambda': 1.171381382375702e-06, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.0043607965511154, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.16539\tvalid's Opt metric: 2.27076\n",
      "[200]\tvalid's l2: 0.129005\tvalid's Opt metric: 1.87455\n",
      "[300]\tvalid's l2: 0.120646\tvalid's Opt metric: 1.73416\n",
      "[400]\tvalid's l2: 0.11678\tvalid's Opt metric: 1.66667\n",
      "[500]\tvalid's l2: 0.115542\tvalid's Opt metric: 1.6308\n",
      "[600]\tvalid's l2: 0.114462\tvalid's Opt metric: 1.60713\n",
      "[700]\tvalid's l2: 0.113807\tvalid's Opt metric: 1.58762\n",
      "[800]\tvalid's l2: 0.113416\tvalid's Opt metric: 1.57511\n",
      "[900]\tvalid's l2: 0.113407\tvalid's Opt metric: 1.57028\n",
      "[1000]\tvalid's l2: 0.113117\tvalid's Opt metric: 1.56083\n",
      "[1100]\tvalid's l2: 0.112604\tvalid's Opt metric: 1.5511\n",
      "[1200]\tvalid's l2: 0.11241\tvalid's Opt metric: 1.54515\n",
      "[1300]\tvalid's l2: 0.112363\tvalid's Opt metric: 1.54156\n",
      "[1400]\tvalid's l2: 0.112253\tvalid's Opt metric: 1.53841\n",
      "[1500]\tvalid's l2: 0.112133\tvalid's Opt metric: 1.53504\n",
      "[1600]\tvalid's l2: 0.112293\tvalid's Opt metric: 1.536\n",
      "[1700]\tvalid's l2: 0.112269\tvalid's Opt metric: 1.53608\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:06:38,329]\u001b[0m Trial 10 finished with value: -1.5346650863519684 and parameters: {'feature_fraction': 0.518532892035075, 'num_leaves': 142, 'bagging_fraction': 0.6179086794065818, 'min_sum_hessian_in_leaf': 0.0043607965511154, 'reg_alpha': 0.0652009782814182, 'reg_lambda': 1.171381382375702e-06}. Best is trial 8 with value: -1.4866729596336794.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1536]\tvalid's l2: 0.112108\tvalid's Opt metric: 1.53467\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 93, 'feature_fraction': 0.8373377891692363, 'bagging_fraction': 0.502188743610675, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.00010251807433007782, 'reg_lambda': 5.62560812725547e-07, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.07581975333807078, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.16256\tvalid's Opt metric: 2.25268\n",
      "[200]\tvalid's l2: 0.126626\tvalid's Opt metric: 1.8255\n",
      "[300]\tvalid's l2: 0.118325\tvalid's Opt metric: 1.69344\n",
      "[400]\tvalid's l2: 0.115713\tvalid's Opt metric: 1.63804\n",
      "[500]\tvalid's l2: 0.114719\tvalid's Opt metric: 1.61061\n",
      "[600]\tvalid's l2: 0.113913\tvalid's Opt metric: 1.58798\n",
      "[700]\tvalid's l2: 0.113353\tvalid's Opt metric: 1.572\n",
      "[800]\tvalid's l2: 0.113246\tvalid's Opt metric: 1.55881\n",
      "[900]\tvalid's l2: 0.113193\tvalid's Opt metric: 1.54783\n",
      "[1000]\tvalid's l2: 0.113396\tvalid's Opt metric: 1.543\n",
      "[1100]\tvalid's l2: 0.11282\tvalid's Opt metric: 1.52883\n",
      "[1200]\tvalid's l2: 0.112458\tvalid's Opt metric: 1.52251\n",
      "[1300]\tvalid's l2: 0.112377\tvalid's Opt metric: 1.52042\n",
      "[1400]\tvalid's l2: 0.112264\tvalid's Opt metric: 1.52071\n",
      "[1500]\tvalid's l2: 0.112188\tvalid's Opt metric: 1.51674\n",
      "[1600]\tvalid's l2: 0.112346\tvalid's Opt metric: 1.51614\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:07:01,861]\u001b[0m Trial 11 finished with value: -1.5165997637997868 and parameters: {'feature_fraction': 0.8373377891692363, 'num_leaves': 93, 'bagging_fraction': 0.502188743610675, 'min_sum_hessian_in_leaf': 0.07581975333807078, 'reg_alpha': 0.00010251807433007782, 'reg_lambda': 5.62560812725547e-07}. Best is trial 8 with value: -1.4866729596336794.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1498]\tvalid's l2: 0.11217\tvalid's Opt metric: 1.5166\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 180, 'feature_fraction': 0.606504606468049, 'bagging_fraction': 0.5025241330190229, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 6.9237532850440935e-06, 'reg_lambda': 5.178366122578138e-07, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.19281972985977133, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.163284\tvalid's Opt metric: 2.26016\n",
      "[200]\tvalid's l2: 0.127038\tvalid's Opt metric: 1.84995\n",
      "[300]\tvalid's l2: 0.118317\tvalid's Opt metric: 1.70864\n",
      "[400]\tvalid's l2: 0.115731\tvalid's Opt metric: 1.65791\n",
      "[500]\tvalid's l2: 0.11414\tvalid's Opt metric: 1.62389\n",
      "[600]\tvalid's l2: 0.112989\tvalid's Opt metric: 1.59724\n",
      "[700]\tvalid's l2: 0.112688\tvalid's Opt metric: 1.58683\n",
      "[800]\tvalid's l2: 0.112584\tvalid's Opt metric: 1.57652\n",
      "[900]\tvalid's l2: 0.112432\tvalid's Opt metric: 1.5674\n",
      "[1000]\tvalid's l2: 0.112603\tvalid's Opt metric: 1.55997\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:07:15,584]\u001b[0m Trial 12 finished with value: -1.5673337806788625 and parameters: {'feature_fraction': 0.606504606468049, 'num_leaves': 180, 'bagging_fraction': 0.5025241330190229, 'min_sum_hessian_in_leaf': 0.19281972985977133, 'reg_alpha': 6.9237532850440935e-06, 'reg_lambda': 5.178366122578138e-07}. Best is trial 8 with value: -1.4866729596336794.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[888]\tvalid's l2: 0.11236\tvalid's Opt metric: 1.56733\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 68, 'feature_fraction': 0.8591579297143492, 'bagging_fraction': 0.6090051583827969, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 1.3869919785090633e-05, 'reg_lambda': 4.588492805253924, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 8.753495888230532, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.169748\tvalid's Opt metric: 2.33956\n",
      "[200]\tvalid's l2: 0.130323\tvalid's Opt metric: 1.89153\n",
      "[300]\tvalid's l2: 0.12071\tvalid's Opt metric: 1.72911\n",
      "[400]\tvalid's l2: 0.117076\tvalid's Opt metric: 1.67228\n",
      "[500]\tvalid's l2: 0.115534\tvalid's Opt metric: 1.63846\n",
      "[600]\tvalid's l2: 0.114878\tvalid's Opt metric: 1.61703\n",
      "[700]\tvalid's l2: 0.114633\tvalid's Opt metric: 1.6099\n",
      "[800]\tvalid's l2: 0.114397\tvalid's Opt metric: 1.60064\n",
      "[900]\tvalid's l2: 0.114022\tvalid's Opt metric: 1.59189\n",
      "[1000]\tvalid's l2: 0.114012\tvalid's Opt metric: 1.58395\n",
      "[1100]\tvalid's l2: 0.113847\tvalid's Opt metric: 1.57641\n",
      "[1200]\tvalid's l2: 0.113683\tvalid's Opt metric: 1.57069\n",
      "[1300]\tvalid's l2: 0.11349\tvalid's Opt metric: 1.56597\n",
      "[1400]\tvalid's l2: 0.113177\tvalid's Opt metric: 1.56069\n",
      "[1500]\tvalid's l2: 0.113257\tvalid's Opt metric: 1.5616\n",
      "[1600]\tvalid's l2: 0.113197\tvalid's Opt metric: 1.55862\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:07:39,148]\u001b[0m Trial 13 finished with value: -1.559970907215497 and parameters: {'feature_fraction': 0.8591579297143492, 'num_leaves': 68, 'bagging_fraction': 0.6090051583827969, 'min_sum_hessian_in_leaf': 8.753495888230532, 'reg_alpha': 1.3869919785090633e-05, 'reg_lambda': 4.588492805253924}. Best is trial 8 with value: -1.4866729596336794.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1421]\tvalid's l2: 0.113157\tvalid's Opt metric: 1.55997\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.01, 'num_leaves': 190, 'feature_fraction': 0.6285831593958296, 'bagging_fraction': 0.563275612978938, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.0031432474570082538, 'reg_lambda': 1.3126327080961932e-08, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.0109072902598878, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 200 100\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "[100]\tvalid's l2: 0.163636\tvalid's Opt metric: 2.25006\n",
      "[200]\tvalid's l2: 0.127593\tvalid's Opt metric: 1.82938\n",
      "[300]\tvalid's l2: 0.119536\tvalid's Opt metric: 1.69258\n",
      "[400]\tvalid's l2: 0.116685\tvalid's Opt metric: 1.64316\n",
      "[500]\tvalid's l2: 0.115595\tvalid's Opt metric: 1.61736\n",
      "[600]\tvalid's l2: 0.114595\tvalid's Opt metric: 1.5924\n",
      "[700]\tvalid's l2: 0.114183\tvalid's Opt metric: 1.57607\n",
      "[800]\tvalid's l2: 0.113855\tvalid's Opt metric: 1.56272\n",
      "[900]\tvalid's l2: 0.113747\tvalid's Opt metric: 1.56147\n",
      "[1000]\tvalid's l2: 0.113703\tvalid's Opt metric: 1.55563\n",
      "[1100]\tvalid's l2: 0.113493\tvalid's Opt metric: 1.5482\n",
      "[1200]\tvalid's l2: 0.113225\tvalid's Opt metric: 1.54059\n",
      "[1300]\tvalid's l2: 0.113171\tvalid's Opt metric: 1.53774\n",
      "[1400]\tvalid's l2: 0.113088\tvalid's Opt metric: 1.53731\n",
      "[1500]\tvalid's l2: 0.113081\tvalid's Opt metric: 1.53232\n",
      "[1600]\tvalid's l2: 0.113212\tvalid's Opt metric: 1.53286\n",
      "[1700]\tvalid's l2: 0.113133\tvalid's Opt metric: 1.53205\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[\u001b 2021-09-25 23:08:04,673]\u001b[0m Trial 14 finished with value: -1.5305128741147611 and parameters: {'feature_fraction': 0.6285831593958296, 'num_leaves': 190, 'bagging_fraction': 0.563275612978938, 'min_sum_hessian_in_leaf': 0.0109072902598878, 'reg_alpha': 0.0031432474570082538, 'reg_lambda': 1.3126327080961932e-08}. Best is trial 8 with value: -1.4866729596336794.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Early stopping, best iteration is:\n",
      "[1541]\tvalid's l2: 0.113033\tvalid's Opt metric: 1.53051\n",
      "[\u001b[0;30;43mlog_lvl_2\u001b[0m] Selected params by Optuna: \u001b[1m{'feature_fraction': 0.5911180438940311, 'num_leaves': 147, 'bagging_fraction': 0.6558555380447055, 'min_sum_hessian_in_leaf': 0.12030178871154672, 'reg_alpha': 0.0008325158565947976, 'reg_lambda': 4.609885087947832e-07}\u001b[0m\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] Start fitting \u001b[1mLvl_0_Pipe_0_Mod_0_Tuned_LightGBM\u001b[0m ...\n",
      "[\u001b[0;30;43mlog_lvl_2\u001b[0m] ===== Start working with \u001b[1mfold 0\u001b[0m for \u001b[1mLvl_0_Pipe_0_Mod_0_Tuned_LightGBM\u001b[0m =====\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.05, 'num_leaves': 147, 'feature_fraction': 0.5911180438940311, 'bagging_fraction': 0.6558555380447055, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.0008325158565947976, 'reg_lambda': 4.609885087947832e-07, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.12030178871154672, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 100 100\n",
      "Training until validation scores don't improve for 100 rounds\n",
      "[100]\tvalid's l2: 0.116909\tvalid's Opt metric: 1.60263\n",
      "[200]\tvalid's l2: 0.115062\tvalid's Opt metric: 1.55911\n",
      "[300]\tvalid's l2: 0.114394\tvalid's Opt metric: 1.53932\n",
      "[400]\tvalid's l2: 0.11354\tvalid's Opt metric: 1.52016\n",
      "Early stopping, best iteration is:\n",
      "[365]\tvalid's l2: 0.113458\tvalid's Opt metric: 1.52062\n",
      "[\u001b[0;30;43mlog_lvl_2\u001b[0m] ===== Start working with \u001b[1mfold 1\u001b[0m for \u001b[1mLvl_0_Pipe_0_Mod_0_Tuned_LightGBM\u001b[0m =====\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.05, 'num_leaves': 147, 'feature_fraction': 0.5911180438940311, 'bagging_fraction': 0.6558555380447055, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.0008325158565947976, 'reg_lambda': 4.609885087947832e-07, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.12030178871154672, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 100 100\n",
      "Training until validation scores don't improve for 100 rounds\n",
      "[100]\tvalid's l2: 0.102729\tvalid's Opt metric: 1.28624\n",
      "[200]\tvalid's l2: 0.102147\tvalid's Opt metric: 1.2918\n",
      "Early stopping, best iteration is:\n",
      "[104]\tvalid's l2: 0.102516\tvalid's Opt metric: 1.27959\n",
      "[\u001b[0;30;43mlog_lvl_2\u001b[0m] ===== Start working with \u001b[1mfold 2\u001b[0m for \u001b[1mLvl_0_Pipe_0_Mod_0_Tuned_LightGBM\u001b[0m =====\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.05, 'num_leaves': 147, 'feature_fraction': 0.5911180438940311, 'bagging_fraction': 0.6558555380447055, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.0008325158565947976, 'reg_lambda': 4.609885087947832e-07, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.12030178871154672, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 100 100\n",
      "Training until validation scores don't improve for 100 rounds\n",
      "[100]\tvalid's l2: 0.102797\tvalid's Opt metric: 1.35665\n",
      "[200]\tvalid's l2: 0.1032\tvalid's Opt metric: 1.33785\n",
      "Early stopping, best iteration is:\n",
      "[121]\tvalid's l2: 0.102504\tvalid's Opt metric: 1.35345\n",
      "[\u001b[0;30;43mlog_lvl_2\u001b[0m] ===== Start working with \u001b[1mfold 3\u001b[0m for \u001b[1mLvl_0_Pipe_0_Mod_0_Tuned_LightGBM\u001b[0m =====\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.05, 'num_leaves': 147, 'feature_fraction': 0.5911180438940311, 'bagging_fraction': 0.6558555380447055, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.0008325158565947976, 'reg_lambda': 4.609885087947832e-07, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.12030178871154672, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 100 100\n",
      "Training until validation scores don't improve for 100 rounds\n",
      "[100]\tvalid's l2: 0.148744\tvalid's Opt metric: 1.52352\n",
      "Early stopping, best iteration is:\n",
      "[95]\tvalid's l2: 0.148803\tvalid's Opt metric: 1.51942\n",
      "[\u001b[0;30;43mlog_lvl_2\u001b[0m] ===== Start working with \u001b[1mfold 4\u001b[0m for \u001b[1mLvl_0_Pipe_0_Mod_0_Tuned_LightGBM\u001b[0m =====\n",
      "[\u001b[0;30;42mlog_lvl_3\u001b[0m] {'task': 'train', 'learning_rate': 0.05, 'num_leaves': 147, 'feature_fraction': 0.5911180438940311, 'bagging_fraction': 0.6558555380447055, 'bagging_freq': 1, 'max_depth': -1, 'verbosity': -1, 'reg_alpha': 0.0008325158565947976, 'reg_lambda': 4.609885087947832e-07, 'min_split_gain': 0.0, 'zero_as_missing': False, 'num_threads': 64, 'max_bin': 255, 'min_data_in_bin': 3, 'random_state': 42, 'min_sum_hessian_in_leaf': 0.12030178871154672, 'objective': 'mse', 'metric': None, 'num_class': 1} 3000 100 100\n",
      "Training until validation scores don't improve for 100 rounds\n",
      "[100]\tvalid's l2: 0.0898878\tvalid's Opt metric: 1.51943\n",
      "[200]\tvalid's l2: 0.0887129\tvalid's Opt metric: 1.47797\n",
      "[300]\tvalid's l2: 0.0884996\tvalid's Opt metric: 1.47562\n",
      "Early stopping, best iteration is:\n",
      "[256]\tvalid's l2: 0.0881285\tvalid's Opt metric: 1.46298\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] Algo = \u001b[1mLvl_0_Pipe_0_Mod_0_Tuned_LightGBM\u001b[0m, score = \u001b[1m-1.42718610921932\u001b[0m\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] \u001b[1mLvl_0_Pipe_0_Mod_0_Tuned_LightGBM\u001b[0m fitting and predicting completed\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] Time left 17623.93 secs\n",
      "\n",
      "[\u001b[0;30;41mlog_lvl_1\u001b[0m] Automl preset training completed in 376.07 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "automl = TabularAutoML(task = task,\n",
    "                               timeout = TIMEOUT,\n",
    "                               cpu_limit = N_THREADS,\n",
    "                               reader_params = {'n_jobs': N_THREADS,\n",
    "                                                'cv': N_FOLDS,\n",
    "                                                'random_state': RANDOM_STATE},\n",
    "                      general_params = {'use_algos': [['lgb_tuned']]},\n",
    "                      verbose = 3)\n",
    "\n",
    "oof_pred = automl.fit_predict(train_data, roles = roles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "#deviation_metric(np.array(train_df['per_square_meter_price']), oof_pred.data[:, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#output['per_square_meter_price'] = output['per_square_meter_price'] * 0.9\n",
    "\n",
    "#output.loc[output['per_square_meter_price'] >= 200000, 'per_square_meter_price'] \\\n",
    "#    = output.loc[output['per_square_meter_price'] >= 200000, 'per_square_meter_price'] * 0.9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "id": "e0d6dfe7"
   },
   "outputs": [],
   "source": [
    "output = pd.DataFrame({'id': test_data['id'],\n",
    "                       'per_square_meter_price': automl.predict(test_data).data[:, 0]})\n",
    "output['per_square_meter_price'] = output['per_square_meter_price'] * 0.9\n",
    "\n",
    "output.loc[output['per_square_meter_price'] >= 200000, 'per_square_meter_price'] \\\n",
    "    = output.loc[output['per_square_meter_price'] >= 200000, 'per_square_meter_price'] * 0.9\n",
    "\n",
    "output.to_csv('raifHack_ki7_upd.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2974, 2)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>per_square_meter_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>COL_289284</td>\n",
       "      <td>40313.496094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>COL_289305</td>\n",
       "      <td>38261.144531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>COL_289318</td>\n",
       "      <td>45483.343750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>COL_289354</td>\n",
       "      <td>84782.210938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>COL_289399</td>\n",
       "      <td>47442.007812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2969</th>\n",
       "      <td>COL_455089</td>\n",
       "      <td>24740.089844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2970</th>\n",
       "      <td>COL_455212</td>\n",
       "      <td>42763.472656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2971</th>\n",
       "      <td>COL_455261</td>\n",
       "      <td>42031.343750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2972</th>\n",
       "      <td>COL_455381</td>\n",
       "      <td>41221.875000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2973</th>\n",
       "      <td>COL_455397</td>\n",
       "      <td>43370.511719</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2974 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              id  per_square_meter_price\n",
       "0     COL_289284            40313.496094\n",
       "1     COL_289305            38261.144531\n",
       "2     COL_289318            45483.343750\n",
       "3     COL_289354            84782.210938\n",
       "4     COL_289399            47442.007812\n",
       "...          ...                     ...\n",
       "2969  COL_455089            24740.089844\n",
       "2970  COL_455212            42763.472656\n",
       "2971  COL_455261            42031.343750\n",
       "2972  COL_455381            41221.875000\n",
       "2973  COL_455397            43370.511719\n",
       "\n",
       "[2974 rows x 2 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "housePrice_AutoML.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
